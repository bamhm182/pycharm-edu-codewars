<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="11" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <RemoteCourse>
          <option name="additionalMaterialsUpdateDate" value="0" />
          <option name="authors">
            <list>
              <StepikUserInfo>
                <option name="firstName" value="Dylan" />
                <option name="guest" value="false" />
                <option name="id" value="91002653" />
                <option name="lastName" value="Wilson" />
              </StepikUserInfo>
            </list>
          </option>
          <option name="compatible" value="true" />
          <option name="courseMode" value="Course Creator" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="CodeWars" />
          <option name="fromZip" value="false" />
          <option name="id" value="53669" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="91002653" />
            </list>
          </option>
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="loadSolutions" value="true" />
          <option name="name" value="CodeWars" />
          <option name="public" value="false" />
          <option name="sectionIds">
            <list>
              <option value="83056" />
            </list>
          </option>
          <option name="stepikChangeStatus" value="Content changed" />
          <option name="type" value="pycharm8 Python" />
          <option name="updateDate" value="1555220078000" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="8 Kyu" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/5a3dd29055519e23ec000074/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;The first input array contains the correct answers to an exam, like [&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;d&quot;]. The second one is &quot;answers&quot; array and contains student's answers. &lt;/p&gt;&#10;&lt;p&gt;The two arrays are not empty and are the same length. Return the score for this array of answers, giving +4 for each correct answer, -1 for each incorrect answer, and +0 for each blank answer(empty string).&lt;/p&gt;&#10;&lt;p&gt;If the score &amp;lt; 0, return 0.&lt;/p&gt;&#10;&lt;p&gt;For example:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;checkExam([&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;], [&quot;a&quot;, &quot;c&quot;, &quot;b&quot;, &quot;d&quot;]) → 6&#10;checkExam([&quot;a&quot;, &quot;a&quot;, &quot;c&quot;, &quot;b&quot;], [&quot;a&quot;, &quot;a&quot;, &quot;b&quot;,  &quot;&quot;]) → 7&#10;checkExam([&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;], [&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]) → 16&#10;checkExam([&quot;b&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;], [&quot;&quot;,  &quot;a&quot;, &quot;a&quot;, &quot;c&quot;]) → 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Check the Exam" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/55902c5eaa8069a5b4000083/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;The company you work for has just been awarded a contract to build a payment gateway. In order to help move things along, you have volunteered to create a function that will take a float and return the amount formatting in dollars and cents.&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;39.99 becomes $39.99&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;The rest of your team will make sure that the argument is sanitized before being passed to your function although you will need to account for adding trailing zeros if they are missing (though you won't have to worry about a dangling period).&lt;/p&gt;&#10;&lt;p&gt;Examples:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;3 needs to become $3.00&#10;&#10;3.1 needs to become $3.10&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Good luck! Your team knows they can count on you!&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Dollars and Cents" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/56b1f01c247c01db92000076/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Given a string, you have to return a string in which each character (case-sensitive) is repeated once.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;double_char(&quot;String&quot;) ==&amp;gt; &quot;SSttrriinngg&quot;&#10;&#10;double_char(&quot;Hello World&quot;) ==&amp;gt; &quot;HHeelllloo  WWoorrlldd&quot;&#10;&#10;double_char(&quot;1234!_ &quot;) ==&amp;gt; &quot;11223344!!__  &quot;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;double_char(&lt;span class=&quot;hljs-string&quot;&gt;&quot;String&quot;&lt;/span&gt;) ==&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;SSttrriinngg&quot;&lt;/span&gt;&#10;&#10;double_char(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;) ==&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;HHeelllloo  WWoorrlldd&quot;&lt;/span&gt;&#10;&#10;double_char(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1234!_ &quot;&lt;/span&gt;) ==&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;11223344!!__  &quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;doubleChar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;String&quot;&lt;/span&gt;) ==&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;SSttrriinngg&quot;&lt;/span&gt;&#10;&#10;doubleChar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;) ==&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;HHeelllloo  WWoorrlldd&quot;&lt;/span&gt;&#10;&#10;doubleChar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1234!_ &quot;&lt;/span&gt;) ==&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;11223344!!__  &quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;doubleChar &lt;span class=&quot;hljs-string&quot;&gt;&quot;String&quot;&lt;/span&gt; =&lt;span class=&quot;hljs-function&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;SSttrriinngg&quot;&lt;/span&gt;&#10;&#10;doubleChar &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt; =&lt;span class=&quot;hljs-function&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;HHeelllloo  WWoorrlldd&quot;&lt;/span&gt;&#10;&#10;doubleChar &lt;span class=&quot;hljs-string&quot;&gt;&quot;1234!_ &quot;&lt;/span&gt; =&lt;span class=&quot;hljs-function&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;11223344!!__  &quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;doubleChar&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;String&quot;&lt;/span&gt; ==&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;SSttrriinngg&quot;&lt;/span&gt;&#10;&#10;&lt;span class=&quot;hljs-title&quot;&gt;doubleChar&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt; ==&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;HHeelllloo  WWoorrlldd&quot;&lt;/span&gt;&#10;&#10;&lt;span class=&quot;hljs-title&quot;&gt;doubleChar&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;1234!_ &quot;&lt;/span&gt; ==&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;11223344!!__  &quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;DoubleChar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;String&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;SSttrriinngg&quot;&lt;/span&gt;&#10;&#10;DoubleChar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;HHeelllloo  WWoorrlldd&quot;&lt;/span&gt;&#10;&#10;DoubleChar(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1234!_ &quot;&lt;/span&gt;) == &lt;span class=&quot;hljs-string&quot;&gt;&quot;11223344!!__  &quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Good Luck!&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Double Char" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/57ee4a67108d3fd9eb0000e7/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Write a function, &lt;code&gt;gooseFilter&lt;/code&gt;/&lt;code&gt;goose_filter&lt;/code&gt;/&lt;code&gt;GooseFilter&lt;/code&gt;, that takes an array of strings as an argument and returns a filtered array containing the same elements but with the 'geese' removed.&lt;/p&gt;&#10;&lt;p&gt;The geese are any strings in the following array, which is pre-populated in your solution:&lt;/p&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;geese = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;African&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Roman Tufted&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Toulouse&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pilgrim&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Steinbacher&quot;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; geese = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;[] { &lt;span class=&quot;hljs-string&quot;&gt;&quot;African&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Roman Tufted&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Toulouse&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pilgrim&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Steinbacher&quot;&lt;/span&gt; };&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;geese = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;African&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Roman Tufted&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Toulouse&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pilgrim&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Steinbacher&quot;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;$geese = [&lt;span class=&quot;hljs-string&quot;&gt;&quot;African&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Roman Tufted&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Toulouse&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pilgrim&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Steinbacher&quot;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;For example, if this array were passed as an argument:&lt;/p&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mallard&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hook Bill&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;African&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Crested&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pilgrim&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Toulouse&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blue Swedish&quot;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mallard&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hook Bill&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;African&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Crested&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pilgrim&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Toulouse&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blue Swedish&quot;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mallard&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hook Bill&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;African&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Crested&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pilgrim&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Toulouse&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blue Swedish&quot;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mallard&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hook Bill&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;African&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Crested&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pilgrim&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Toulouse&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blue Swedish&quot;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Your function would return the following array:&lt;/p&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mallard&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hook Bill&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Crested&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blue Swedish&quot;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;[] {&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mallard&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hook Bill&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Crested&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blue Swedish&quot;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mallard&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hook Bill&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Crested&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blue Swedish&quot;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&quot;Mallard&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hook Bill&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Crested&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Blue Swedish&quot;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;The elements in the returned array should be in the same order as in the initial array passed to your function, albeit with the 'geese' removed. Note that all of the strings will be in the same case as those provided, and some elements may be repeated.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Filter Out the Geese" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/56fc55cd1f5a93d68a001d4e/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Suzuki is a monk who climbs a large staircase to the monastery as part of a ritual. Some days he climbs more stairs than others depending on the number of students he must train in the morning. He is curious how many stairs might be climbed over the next 20 years and has spent a year marking down his daily progress. &lt;/p&gt;&#10;&lt;p&gt;The sum of all the stairs logged in a year will be used for estimating the number he might climb in 20. &lt;/p&gt;&#10;&lt;p&gt;&lt;u&gt;20_year_estimate = one_year_total * 20&lt;/u&gt;&lt;/p&gt;&#10;&lt;p&gt;You will receive the following data structure representing the stairs Suzuki logged in a year. You will have all data for the entire year so regardless of how it is logged the problem should be simple to solve.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;stairs = [sunday,monday,tuesday,wednesday,thursday,friday,saturday]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Make sure your solution takes into account all of the nesting within the stairs array.&lt;/p&gt;&#10;&lt;p&gt;Each weekday in the stairs array is an array.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;sunday = [6737, 7244, 5776, 9826, 7057, 9247, 5842, 5484, 6543, 5153, 6832, 8274, 7148, 6152, 5940, 8040, 9174, 7555, 7682, 5252, 8793, 8837, 7320, 8478, 6063, 5751, 9716, 5085, 7315, 7859, 6628, 5425, 6331, 7097, 6249, 8381, 5936, 8496, 6934, 8347, 7036, 6421, 6510, 5821, 8602, 5312, 7836, 8032, 9871, 5990, 6309, 7825]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your function should return the 20 year estimate of the stairs climbed using the formula above. &lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="How Many Stairs Will Suzuki Climb in 20 Years" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/regex-count-lowercase-letters/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Your task is simply to count the total number of lowercase letters in a string.&lt;/p&gt;&#10;&lt;h2&gt;Examples&lt;/h2&gt;&#10;```javascript&#10;lowercaseCount(&quot;abc&quot;); ===&amp;gt; 3&#10;&#10;&lt;p&gt;lowercaseCount(&quot;abcABC123&quot;); ===&amp;gt; 3&lt;/p&gt;&#10;&lt;p&gt;lowercaseCount(&quot;abcABC123!@€£#$%^&amp;amp;*()_-+=}{[]|':;?/&amp;gt;.&amp;lt;,~&quot;); ===&amp;gt; 3&lt;/p&gt;&#10;&lt;p&gt;lowercaseCount(&quot;&quot;); ===&amp;gt; 0;&lt;/p&gt;&#10;&lt;p&gt;lowercaseCount(&quot;ABC123!@€£#$%^&amp;amp;*()_-+=}{[]|':;?/&amp;gt;.&amp;lt;,~&quot;); ===&amp;gt; 0&lt;/p&gt;&#10;&lt;p&gt;lowercaseCount(&quot;abcdefghijklmnopqrstuvwxyz&quot;); ===&amp;gt; 26&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;```csharp&#10;LowercaseCountCheck(&quot;abc&quot;) == 3&#10;LowercaseCountCheck(&quot;abcABC123&quot;) == 3&#10;LowercaseCountCheck(&quot;abcABC123!@€£#$%^&amp;amp;*()_-+=}{[]|\':;?/&amp;gt;.&amp;lt;,~&quot;&quot;) == 3&#10;LowercaseCountCheck(&quot;&quot;) == 0&#10;LowercaseCountCheck(&quot;ABC123!@€£#$%^&amp;amp;*()_-+=}{[]|\':;?/&amp;gt;.&amp;lt;,~&quot;&quot;) == 0&#10;LowercaseCountCheck(&quot;abcdefghijklmnopqrstuvwxyz&quot;) == 26&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Regex Count Lowercase Letters" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;&quot;https://www.codewars.com/kata/noobcode-01-supersize-me-dot-dot-dot-or-rather-this-integer/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Write a function that rearranges an integer into its largest possible value. &lt;/p&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;superSize(&lt;span class=&quot;hljs-number&quot;&gt;123456&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//654321&lt;/span&gt;&#10;superSize(&lt;span class=&quot;hljs-number&quot;&gt;105&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// 510&lt;/span&gt;&#10;superSize(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// 21&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;Kata.SuperSize(&lt;span class=&quot;hljs-number&quot;&gt;123456&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;//654321&lt;/span&gt;&#10;Kata.SuperSize(&lt;span class=&quot;hljs-number&quot;&gt;105&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// 510&lt;/span&gt;&#10;Kata.SuperSize(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// 21&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;super_size(&lt;span class=&quot;hljs-number&quot;&gt;123456&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# 654321&lt;/span&gt;&#10;super_size(&lt;span class=&quot;hljs-number&quot;&gt;105&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;# 510&lt;/span&gt;&#10;super_size(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)     &lt;span class=&quot;hljs-comment&quot;&gt;# 21&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;super_size(&lt;span class=&quot;hljs-number&quot;&gt;123456&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# 654321&lt;/span&gt;&#10;super_size(&lt;span class=&quot;hljs-number&quot;&gt;105&lt;/span&gt;)    &lt;span class=&quot;hljs-comment&quot;&gt;# 510&lt;/span&gt;&#10;super_size(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)     &lt;span class=&quot;hljs-comment&quot;&gt;# 21&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;superSize&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;123456&lt;/span&gt; `shouldBe` &lt;span class=&quot;hljs-number&quot;&gt;654321&lt;/span&gt;&#10;&lt;span class=&quot;hljs-title&quot;&gt;superSize&lt;/span&gt;    &lt;span class=&quot;hljs-number&quot;&gt;105&lt;/span&gt; `shouldBe`    &lt;span class=&quot;hljs-number&quot;&gt;510&lt;/span&gt;&#10;&lt;span class=&quot;hljs-title&quot;&gt;superSize&lt;/span&gt;     &lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt; `shouldBe`     &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;superSize(&lt;span class=&quot;hljs-number&quot;&gt;123456&lt;/span&gt;) &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;654321&lt;/span&gt;&#10;superSize(&lt;span class=&quot;hljs-number&quot;&gt;105&lt;/span&gt;) &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;510&lt;/span&gt;&#10;superSize(&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;) &lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;If the argument passed through is single digit or is already the maximum possible integer, your function should simply return it.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="SUPERSIZE ME... or rather, this integer!" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/56a3f08aa9a6cc9b75000023/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Write a simple regex to validate a username. Allowed characters are:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;lowercase letters,&lt;/li&gt;&#10;&lt;li&gt;numbers,&lt;/li&gt;&#10;&lt;li&gt;underscore&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Length should be between 4 and 16 characters (both included).&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Simple Validation of a Username with Regex" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/572b6b2772a38bc1e700007a/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;You'll be given a string, and have to return the total of all the unicode characters as an int. Should be able to handle any characters sent at it. &lt;/p&gt;&#10;&lt;p&gt;examples:&lt;/p&gt;&#10;&lt;p&gt;uniTotal(&quot;a&quot;) == 97&#10;uniTotal(&quot;aaa&quot;) == 291&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="9" />
                      <option name="name" value="Unicode Total" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="2" />
                <option name="name" value="7 Kyu" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/binary-representation-of-an-integer/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;p&gt;NOTE: This seems pretty difficult for a 7.&lt;/p&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Write a function that returns a vector (list in Python) with each element representing one bit of a 32bit unsigned/signed integer in such a way that if printed it would appear as the binary representation of the integer (Least Significant Bit on the right). &lt;/p&gt;&#10;&lt;p&gt;e.g. 1 = 00000000000000000000000000000001&lt;/p&gt;&#10;&lt;p&gt;Assign either a 1 or a 0 to the vector element depending on whether the bit at the corresponding position is a 1 or 0. &lt;/p&gt;&#10;&lt;p&gt;For example: &lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;showBits(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;); &lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;would return the following:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt; bits = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;};&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;-1 on the other hand would contain all 1s:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;showBits(&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;); &lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-c++&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt; bits = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;};&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;The function takes one argument (n) which is the integer to be converted to binary.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Binary Representation of an Integer" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/5a25ac6ac5e284cfbe000111/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;If you finish this kata, you can try &lt;a href=&quot;http://www.codewars.com/kata/insane-coloured-triangles&quot; target=&quot;_blank&quot;&gt;Insane Coloured Triangles&lt;/a&gt; by Bubbler, which is a &lt;strong&gt;&lt;em&gt;much&lt;/em&gt;&lt;/strong&gt; harder version of this one.&lt;/p&gt;&#10;&lt;p&gt;A coloured triangle is created from a row of colours, each of which is red, green or blue. Successive rows, each containing one fewer colour than the last, are generated by considering the two touching colours in the previous row. If these colours are identical, the same colour is used in the new row. If they are different, the missing colour is used in the new row. This is continued until the final row, with only a single colour, is generated.&lt;/p&gt;&#10;&lt;p&gt;The different possibilities are:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;Colour here:        G G        B G        R G        B R&#10;Becomes colour:      G          R          B          G&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With a bigger example:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;R R G B R G B B&#10; R B R G B R B&#10;  G G B R G G&#10;   G R G B G&#10;    B B R R&#10;     B G R&#10;      R B&#10;       G&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will be given the first row of the triangle as a string and its your job to return the final colour which would appear in the bottom row as a string. In the case of the example above, you would the given &lt;code&gt;RRGBRGBB&lt;/code&gt; you should return &lt;code&gt;G&lt;/code&gt;.&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;The input string will only contain the uppercase letters &lt;code&gt;R, G, B&lt;/code&gt; and there will be at least one letter so you do not have to test for invalid input.&lt;/li&gt;&#10;&lt;li&gt;If you are only given one colour as the input, return that colour. &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&lt;em&gt;Adapted from the 2017 British Informatics Olympiad&lt;/em&gt;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Coloured Triangles" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/complementary-dna/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Deoxyribonucleic acid (DNA) is a chemical found in the nucleus of cells and carries the &quot;instructions&quot; for the development and functioning of living organisms.&lt;/p&gt;&#10;&lt;p&gt;If you want to know more &lt;a href=&quot;http://en.wikipedia.org/wiki/DNA&quot; target=&quot;_blank&quot;&gt;http://en.wikipedia.org/wiki/DNA&lt;/a&gt;&lt;/p&gt;&#10;&lt;p&gt;In DNA strings, symbols &quot;A&quot; and &quot;T&quot; are complements of each other, as &quot;C&quot; and &quot;G&quot;.&#10;You have function with one side of the DNA (string, except for Haskell); you need to get the other complementary side. DNA strand is never empty or there is no DNA at all (again, except for Haskell).&lt;/p&gt;&#10;&lt;p&gt;More similar exercise are found here &lt;a href=&quot;http://rosalind.info/problems/list-view/&quot; target=&quot;_blank&quot;&gt;http://rosalind.info/problems/list-view/&lt;/a&gt; (source)&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;DNA_strand (&lt;span class=&quot;hljs-string&quot;&gt;&quot;ATTGC&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;TAACG&quot;&lt;/span&gt;&#10;&#10;DNA_strand (&lt;span class=&quot;hljs-string&quot;&gt;&quot;GTAT&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;CATA&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;DNAStrand (&quot;ATTGC&quot;) # return &quot;TAACG&quot;&#10;&#10;DNAStrand (&quot;GTAT&quot;) # return &quot;CATA&quot; &lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;dnaStrand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ATTGC&quot;&lt;/span&gt;) # &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;TAACG&quot;&lt;/span&gt;&#10;&#10;dnaStrand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GTAT&quot;&lt;/span&gt;) # &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;CATA&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;MakeComplement(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ATTGC&quot;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;TAACG&quot;&lt;/span&gt;&#10;&#10;MakeComplement(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GTAT&quot;&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;CATA&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;DNA_strand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ATTGC&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// returns &quot;TAACG&quot;&lt;/span&gt;&#10;DNA_strand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GTAT&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// returns &quot;CATA&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;DNA_strand (&lt;span class=&quot;hljs-string&quot;&gt;&quot;ATTGC&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;TAACG&quot;&lt;/span&gt;&#10;&#10;DNA_strand (&lt;span class=&quot;hljs-string&quot;&gt;&quot;GTAT&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;CATA&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-crystal&quot;&gt;dna_strand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ATTGC&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;TAACG&quot;&lt;/span&gt;&#10;&#10;dna_strand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GTAT&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;CATA&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;DnaStrand.makeComplement(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ATTGC&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;TAACG&quot;&lt;/span&gt;&#10;&#10;DnaStrand.makeComplement(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GTAT&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;CATA&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;dnaStrand&lt;/span&gt; []        `shouldBe` []&#10;&lt;span class=&quot;hljs-title&quot;&gt;dnaStrand&lt;/span&gt; [&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;G&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;C&lt;/span&gt;] `shouldBe` [&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;C&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;G&lt;/span&gt;]&#10;&lt;span class=&quot;hljs-title&quot;&gt;dnaStrand&lt;/span&gt; [&lt;span class=&quot;hljs-type&quot;&gt;G&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;] `shouldBe` [&lt;span class=&quot;hljs-type&quot;&gt;C&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt;]&#10;&lt;span class=&quot;hljs-title&quot;&gt;dnaStrand&lt;/span&gt; [&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;A&lt;/span&gt;] `shouldBe` [&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;,&lt;span class=&quot;hljs-type&quot;&gt;T&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;(&lt;span class=&quot;hljs-name&quot;&gt;is&lt;/span&gt; (&lt;span class=&quot;hljs-name&quot;&gt;&lt;span class=&quot;hljs-builtin-name&quot;&gt;=&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;hljs-name&quot;&gt;dna-strand&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;ATTGC&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;TAACG&quot;&lt;/span&gt;))&#10;&#10;(&lt;span class=&quot;hljs-name&quot;&gt;is&lt;/span&gt; (&lt;span class=&quot;hljs-name&quot;&gt;&lt;span class=&quot;hljs-builtin-name&quot;&gt;=&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;hljs-name&quot;&gt;dna-strand&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;GTAT&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;CATA&quot;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;dna_strand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ATTGC&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;/* return &quot;TAACG&quot; */&lt;/span&gt;&#10;dna_strand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GTAT&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;/* return &quot;CATA&quot;  */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-golang&quot;&gt;DNAStrand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ATTGC&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// returns &quot;TAACG&quot;&lt;/span&gt;&#10;&#10;DNAStrand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GTAT&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// returns &quot;CATA&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;dna_strand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ATTGC&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// returns &quot;TAACG&quot;&lt;/span&gt;&#10;dna_strand(&lt;span class=&quot;hljs-string&quot;&gt;&quot;GTAT&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// returns &quot;CATA&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Complementary DNA" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/5467e4d82edf8bbf40000155&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Your task is to make a function that can take any non-negative integer as a argument and return it with its digits in descending order. Essentially, rearrange the digits to create the highest possible number.&lt;/p&gt;&#10;&lt;h3 id=&quot;examples&quot;&gt;Examples:&lt;/h3&gt;&#10;&lt;p&gt;Input: &lt;code&gt;21445&lt;/code&gt;&#10;Output: &lt;code&gt;54421&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;Input: &lt;code&gt;145263&lt;/code&gt;&#10;Output: &lt;code&gt;654321&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;Input: &lt;code&gt;1254859723&lt;/code&gt;&#10;Output: &lt;code&gt;9875543221&lt;/code&gt;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Descending Order" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/55908aad6620c066bc00002a&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Check to see if a string has the same amount of 'x's and 'o's. The method must return a boolean and be case insensitive. The string can contain any char.&lt;/p&gt;&#10;&lt;p&gt;Examples input/output:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;XO(&quot;ooxx&quot;) =&amp;gt; true&#10;XO(&quot;xooxx&quot;) =&amp;gt; false&#10;XO(&quot;ooxXm&quot;) =&amp;gt; true&#10;XO(&quot;zpzpzpp&quot;) =&amp;gt; true // when no 'x' and 'o' is present should return true&#10;XO(&quot;zzoo&quot;) =&amp;gt; false&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Exes and Ohs" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/56747fd5cb988479af000028&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;You are going to be given a word. Your job is to return the middle character of the word. If the word's length is odd, return the middle character. If the word's length is even, return the middle 2 characters.&lt;/p&gt;&#10;&lt;p&gt;#Examples:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;Kata.getMiddle(&quot;test&quot;) should return &quot;es&quot;&#10;&#10;Kata.getMiddle(&quot;testing&quot;) should return &quot;t&quot;&#10;&#10;Kata.getMiddle(&quot;middle&quot;) should return &quot;dd&quot;&#10;&#10;Kata.getMiddle(&quot;A&quot;) should return &quot;A&quot;&#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;#Input&lt;/p&gt;&#10;&lt;p&gt;A word (string) of length &lt;code&gt;0 &amp;lt; str &amp;lt; 1000&lt;/code&gt; (In javascript you may get slightly more than 1000 in some test cases due to an error in the test cases). You do not need to test for this. This is only here to tell you that you do not need to worry about your solution timing out.&lt;/p&gt;&#10;&lt;p&gt;#Output&lt;/p&gt;&#10;&lt;p&gt;The middle character(s) of the word represented as a string. &lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Get the Middle Character" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/554b4ac871d6813a03000035&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 1&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 -3&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;Kata.HighAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 1&quot;&lt;/span&gt;&#10;Kata.HighAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 -3&quot;&lt;/span&gt;&#10;Kata.HighAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;highAndLow &lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 1&quot;&lt;/span&gt;&#10;highAndLow &lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 -3&quot;&lt;/span&gt;&#10;highAndLow &lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 1&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 -3&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 1&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 -3&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;);  &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 1&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 -3&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;5 1&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;5 -3&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;high_and_low(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;5 1&quot;&lt;/span&gt;&#10;high_and_low(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;5 -3&quot;&lt;/span&gt;&#10;high_and_low(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;high_and_low(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;5 1&quot;&lt;/span&gt;&#10;high_and_low(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;5 -3&quot;&lt;/span&gt;&#10;high_and_low(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-crystal&quot;&gt;high_and_low(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;5 1&quot;&lt;/span&gt;&#10;high_and_low(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;5 -3&quot;&lt;/span&gt;&#10;high_and_low(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;HighAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 1&quot;&lt;/span&gt;&#10;HighAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 -3&quot;&lt;/span&gt;&#10;HighAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;highAndLow&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;)  # return &lt;span class=&quot;hljs-string&quot;&gt;&quot;5 1&quot;&lt;/span&gt;&#10;&lt;span class=&quot;hljs-title&quot;&gt;highAndLow&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;) # return &lt;span class=&quot;hljs-string&quot;&gt;&quot;5 -3&quot;&lt;/span&gt;&#10;&lt;span class=&quot;hljs-title&quot;&gt;highAndLow&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;) # return &lt;span class=&quot;hljs-string&quot;&gt;&quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-golang&quot;&gt;HighAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 1&quot;&lt;/span&gt;&#10;HighAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 -3&quot;&lt;/span&gt;&#10;HighAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 1&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 2 -3 4 5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;5 -3&quot;&lt;/span&gt;&#10;highAndLow(&lt;span class=&quot;hljs-string&quot;&gt;&quot;1 9 3 4 -5&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// return &quot;9 -5&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;All numbers are valid &lt;code&gt;Int32&lt;/code&gt;, no &lt;em&gt;need&lt;/em&gt; to validate them.&lt;/li&gt;&#10;&lt;li&gt;There will always be at least one number in the input string.&lt;/li&gt;&#10;&lt;li&gt;Output string must be two numbers separated by a single space, and highest number is first.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Highest and Lowest" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/5667e8f4e3f572a8f2000039/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;This time no story, no theory. The examples below show you how to write function &lt;code&gt;accum&lt;/code&gt;:&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;accum(&quot;abcd&quot;) -&amp;gt; &quot;A-Bb-Ccc-Dddd&quot;&#10;accum(&quot;RqaEzty&quot;) -&amp;gt; &quot;R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy&quot;&#10;accum(&quot;cwAt&quot;) -&amp;gt; &quot;C-Ww-Aaa-Tttt&quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The parameter of accum is a string which includes only letters from &lt;code&gt;a..z&lt;/code&gt; and &lt;code&gt;A..Z&lt;/code&gt;.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Mumbling" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&#10;    From &lt;a href=&quot;https://www.codewars.com/kata/578553c3a1b8d5c40300037c/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;    &lt;p&gt;Given an array of one's and zero's convert the equivalent binary value to an integer.&lt;/p&gt;&#10;    &lt;p&gt;Eg: [0, 0, 0, 1] is treated as 0001 which is the binary representation of 1.&lt;/p&gt;&#10;    &lt;p&gt;Examples:&lt;/p&gt;&#10;    &lt;pre&gt;&lt;code&gt;&#10;        Testing: [0, 0, 0, 1] ==&amp;gt; 1&#10;        Testing: [0, 0, 1, 0] ==&amp;gt; 2&#10;        Testing: [0, 1, 0, 1] ==&amp;gt; 5&#10;        Testing: [1, 0, 0, 1] ==&amp;gt; 9&#10;        Testing: [0, 0, 1, 0] ==&amp;gt; 2&#10;        Testing: [0, 1, 1, 0] ==&amp;gt; 6&#10;        Testing: [1, 1, 1, 1] ==&amp;gt; 15&#10;        Testing: [1, 0, 1, 1] ==&amp;gt; 11&#10;&#10;        Testing: [1, 0, 0, 1, 1] ==&amp;gt; 19&#10;        Testing: [1, 0, 0, 0, 0, 0] ==&amp;gt; 32&#10;    &lt;/code&gt;&lt;/pre&gt;&#10;    &lt;p&gt;NOTE: the arrays can have varying lengths, not just limited to &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="9" />
                      <option name="name" value="Ones and Zeros" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/57cebe1dc6fdc20c57000ac9&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Simple, given a string of words, return the length of the shortest word(s).&lt;/p&gt;&#10;&lt;p&gt;String will never be empty and you do not need to account for different data types.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="10" />
                      <option name="name" value="Shortest Word" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/57ea5b0b75ae11d1e800006c/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Write a function that takes an array of strings as an argument and returns a sorted array containing the same strings, ordered from shortest to longest.&lt;/p&gt;&#10;&lt;p&gt;For example, if this array were passed as an argument:&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;[&quot;Telescopes&quot;, &quot;Glasses&quot;, &quot;Eyes&quot;, &quot;Monocles&quot;]&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;Your function would return the following array:&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;[&quot;Eyes&quot;, &quot;Glasses&quot;, &quot;Monocles&quot;, &quot;Telescopes&quot;]&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;All of the strings in the array passed to your function will be different lengths, so you will not have to decide how to order multiple strings of the same length.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="11" />
                      <option name="name" value="Sort Array By String Length" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/54ff3102c1bad923760001f3&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Return the number (count) of vowels in the given string. &lt;/p&gt;&#10;&lt;p&gt;We will consider a, e, i, o, and u as vowels for this Kata.&lt;/p&gt;&#10;&lt;p&gt;The input string will only consist of lower case letters and/or spaces.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="12" />
                      <option name="name" value="Vowel Count" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="3" />
                <option name="name" value="6 Kyu" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/count-the-smiley-faces/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;&lt;font size=&quot;5&quot;&gt;Description:&lt;/font&gt;&lt;br&gt;&#10;Given an array (arr) as an argument complete the function &lt;code&gt;countSmileys&lt;/code&gt; that should return the total number of smiling faces.&lt;br&gt;&#10;&lt;font size=&quot;4&quot;&gt;Rules for a smiling face:&lt;/font&gt;&lt;br&gt;&#10;-Each smiley face must contain a valid pair of eyes.&#10;Eyes can be marked as &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;;&lt;/code&gt;&lt;br&gt;&#10;-A smiley face can have a nose but it does not have to.&#10;Valid characters for a nose are &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;&lt;br&gt;&#10;-Every smiling face must have a smiling mouth that should be marked with either&#10;&lt;code&gt;)&lt;/code&gt; or &lt;code&gt;D&lt;/code&gt;.&lt;br&gt;&#10;No additional characters are allowed except for those mentioned.&lt;br&gt;&#10;&lt;strong&gt;Valid smiley face examples:&lt;/strong&gt;&lt;br&gt;&#10;&lt;code&gt;:) :D ;-D :~)&lt;/code&gt;&lt;br&gt;&#10;&lt;strong&gt;Invalid smiley faces:&lt;/strong&gt;&lt;br&gt;&#10;&lt;code&gt;;( :&amp;gt; :} :]&lt;/code&gt;&#10;&lt;br&gt;&lt;br&gt;&#10;&lt;strong&gt;Example cases:&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;countSmileys([&lt;span class=&quot;hljs-string&quot;&gt;':)'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;';('&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;';}'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;':-D'&lt;/span&gt;]);       &lt;span class=&quot;hljs-comment&quot;&gt;// should return 2;&lt;/span&gt;&#10;countSmileys([&lt;span class=&quot;hljs-string&quot;&gt;';D'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;':-('&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;':-)'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;';~)'&lt;/span&gt;]);     &lt;span class=&quot;hljs-comment&quot;&gt;// should return 3;&lt;/span&gt;&#10;countSmileys([&lt;span class=&quot;hljs-string&quot;&gt;';]'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;':['&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;';*'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;':$'&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;';-D'&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// should return 1;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;br&gt;&#10;&lt;b&gt;Note:&lt;/b&gt; In case of an empty array return 0. You will not be tested with invalid input (input will always be an array). Order of the face (eyes, nose, mouth) elements will always be the same&#10;&lt;h3&gt;Happy coding!&lt;/h3&gt;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Count the Smiley Faces" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/54b42f9314d9229fd6000d9c/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;The goal of this exercise is to convert a string to a new string where each character in the new string is &lt;code&gt;&quot;(&quot;&lt;/code&gt; if that character appears only once in the original string, or &lt;code&gt;&quot;)&quot;&lt;/code&gt; if that character appears more than once in the original string. Ignore capitalization when determining if a character is a duplicate.&lt;/p&gt;&#10;&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;&#10;&lt;pre&gt;&lt;code&gt;&quot;din&quot;      =&amp;gt;  &quot;(((&quot;&#10;&quot;recede&quot;   =&amp;gt;  &quot;()()()&quot;&#10;&quot;Success&quot;  =&amp;gt;  &quot;)())())&quot;&#10;&quot;(( @&quot;     =&amp;gt;  &quot;))((&quot; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;&#10;&lt;p&gt;Assertion messages may be unclear about what they display in some languages. If you read &lt;code&gt;&quot;...It Should encode XXX&quot;&lt;/code&gt;, the &lt;code&gt;&quot;XXX&quot;&lt;/code&gt; is the expected result, not the input!&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Duplicate Encoder" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/56af1a20509ce5b9b000001e/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;A traveling salesman has to visit clients. He got each client's address e.g. &lt;code&gt;&quot;432 Main Long Road St. Louisville OH 43071&quot;&lt;/code&gt; as a list.&lt;/p&gt;&#10;&lt;p&gt;The basic zipcode format usually consists of two capital letters followed by a white space and five digits.&#10;The list of clients to visit was given as a string of all addresses, each separated from the others by a comma, e.g. :&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;&quot;123 Main Street St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street Pollocksville NY 56432&quot;&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt;To ease his travel he wants to group the list by zipcode.&lt;/p&gt;&#10;&lt;h1 id=&quot;task&quot;&gt;Task&lt;/h1&gt;&#10;&lt;p&gt;The function &lt;code&gt;travel&lt;/code&gt; will take two parameters &lt;code&gt;r&lt;/code&gt; (addresses' list of all clients' as a string) and &lt;code&gt;zipcode&lt;/code&gt; and returns a string in the following format:&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;zipcode:street and town,street and town,.../house number,house number,...&lt;/code&gt; &lt;/p&gt;&#10;&lt;p&gt;The street numbers must be in the same order as the streets where they belong.&lt;/p&gt;&#10;&lt;p&gt;If a given zipcode doesn't exist in the list of clients' addresses return &lt;code&gt;&quot;zipcode:/&quot;&lt;/code&gt;&lt;/p&gt;&#10;&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;&#10;&lt;pre&gt;&lt;code&gt;r = &quot;123 Main Street St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street Pollocksville NY 56432&quot;&#10;&#10;travel(r, &quot;OH 43071&quot;) --&amp;gt; &quot;OH 43071:Main Street St. Louisville,Main Long Road St. Louisville/123,432&quot;&#10;&#10;travel(r, &quot;NY 56432&quot;) --&amp;gt; &quot;NY 56432:High Street Pollocksville/786&quot;&#10;&#10;travel(r, &quot;NY 5643&quot;) --&amp;gt; &quot;NY 5643:/&quot;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;note-for-elixir&quot;&gt;Note for Elixir:&lt;/h1&gt;&#10;&lt;p&gt;In Elixir the empty addresses' input is an empty &lt;em&gt;list&lt;/em&gt;, not an empty string.&lt;/p&gt;&#10;&lt;h1 id=&quot;note&quot;&gt;Note:&lt;/h1&gt;&#10;&lt;p&gt;You can see a few addresses and zipcodes in the test cases.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Salesman's Travel" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/the-u-n-known-but-known-variables-multiplication/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;This kata is definitely harder than the first one. See the last one here: &lt;a href=&quot;http://www.codewars.com/kata/the-unknown-but-known-variables-addition&quot; target=&quot;_blank&quot;&gt;http://www.codewars.com/kata/the-unknown-but-known-variables-addition&lt;/a&gt;&lt;/p&gt;&#10;&lt;p&gt;This one is a programming problem as well as a puzzle. And this is one of those annoying puzzles that is going to seem impossible, as the answer is not like a riddle, but something random some jerk over the internet came up with. But I have confidence you will solve it.&lt;/p&gt;&#10;&lt;p&gt;There will be a string input in this format:&#10;&lt;code&gt;'a*b'&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;2 lower-case letters (a-z) seperated by a '*'&lt;/p&gt;&#10;&lt;p&gt;Return the product of the two variables. The product will always be a positive integer or 0.&lt;/p&gt;&#10;&lt;p&gt;There is one correct answer for a pair of variables.&lt;/p&gt;&#10;&lt;p&gt;I know the answers, it is your task to find out.&lt;/p&gt;&#10;&lt;p&gt;Once you crack the code for a couple of the pairs, you should have the answer for the rest.&lt;/p&gt;&#10;&lt;p&gt;It is like when you were in school doing math and you saw &lt;code&gt;&quot;12 = c*b&quot;&lt;/code&gt; and you needed to find out what c and b were.&lt;/p&gt;&#10;&lt;p&gt;However you don't have a 12. You have an UnKNOWN there as well. Example:&lt;/p&gt;&#10;&lt;p&gt;X = a*b.&lt;/p&gt;&#10;&lt;p&gt;You don't know what X is, and you don't know what b is or a, but it is a puzzle and you will find out.&lt;/p&gt;&#10;&lt;p&gt;As part of this puzzle, there is two hints or clues on solving this. I won't tell you what the other one is. But the first is: &lt;code&gt;The key is in the title.&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;Given the input as a string - Return the product of the two variables as int.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="The U-n-KNOWN but known variables -  Multiplication" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/number-02-music-theory-validate-rhythm/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Your task is to validate rhythm with a meter.&lt;/p&gt;&#10;&lt;hr&gt;&#10;&lt;p&gt;Rules:&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;&lt;p&gt;Rhythmic division requires that in one whole note (1) there are two half notes (2) or four quarter notes (4) or eight eighth notes (8). &lt;/p&gt;&#10;&lt;pre&gt;Examples: 1 = 2 + 2, 1 = 4 + 4 + 4 + 4 ...&#10;Note that: 2 = 4 + 4, 4 = 8 + 8, 2 = 8 + 8 + 4 ...&#10;&lt;/pre&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;Meter gives an information how many rhythmic types of notes should be in one bar. Bar is the the primary section of a musical score.&lt;/p&gt;&#10;&lt;pre&gt;Examples:&#10;       4/4 -&amp;gt; 4 quarter notes in a bar&#10;       5/2 -&amp;gt; 5 half notes in a bar&#10;       3/8 -&amp;gt; 3 eighth notes in a bar&#10;Note that:&#10;for 4/4 valid bars are: '4444', '88888888', '2488' ...&#10;for 5/2 valid bars are: '22222', '2244244', '8888244888844' ...&#10;for 3/8 valid bars are: '888', '48' ...&#10;&lt;/pre&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;Anacrusis occurs when all bars but the first and last are valid, and the notes in the first and last bars when combined would also make a valid bar.&lt;/p&gt;&#10;&lt;pre&gt;Examples:&#10;for 4/4 valid anacrusis is -&amp;gt; 44|...|44 or 88|...|888888 or 2|...|488&#10;for 5/2 valid anacrusis is -&amp;gt; 22|...|222 or 222|...|22 or  2244|...|244&#10;for 3/8 valid anacrusis is -&amp;gt; 8|...|88 or 4|...|8 or 8|...|4&#10;Note:&#10;When anacrusis is valid but other bars in score are not -&amp;gt; return 'Invalid rhythm'&#10;&lt;/pre&gt;&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;hr&gt;&#10;&lt;p&gt;Input:&lt;/p&gt;&#10;&lt;pre&gt;meter - array: eg. [4, 4],&#10;score - string, bars separated with '|': eg. '4444|8484842|888'&#10;&#10;Output:&#10;string message: 'Valid rhythm', 'Valid rhythm with anacrusis' or 'Invalid rhythm'&#10;&lt;/pre&gt;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="#02 - Music Theory - Validate Rhythm" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/chocolate-problem/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Chocolate factory produces unusual chocolate. Chocolate bars come in the form of &lt;strong&gt;&lt;em&gt;long tiles 1 × N&lt;/em&gt;&lt;/strong&gt;, which consists of N squares. Each square shows the portrait of one of the famous N confectioners of this company. Different chocolates have the same N confectioners' portraits, but in a different order.&lt;/p&gt;&#10;&lt;h1 id=&quot;task&quot;&gt;Task&lt;/h1&gt;&#10;&lt;p&gt;Write a method, that for a given order of portraits of two chocolate bars determines a minimum number of breaks, that you need to perform on a first bar to form a second bar by repositioning the broken parts.&lt;/p&gt;&#10;&lt;h1 id=&quot;restriction&quot;&gt;Restriction&lt;/h1&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;you can break a bar only on the boundaries of its' squares.&lt;/li&gt;&#10;&lt;li&gt;you can’t flip initial bar or it's parts.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;h1 id=&quot;input-data&quot;&gt;Input data&lt;/h1&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;N - integer number (2 ≤ N ≤ 1000000), specifies the size of a chocolate bar, i.e. the number of squares in it. All bakers are numbered from 1 to N.&lt;/li&gt;&#10;&lt;li&gt;firstBar, secondBar - integer arrays of N different numbers each (all the numbers don't exceed N) - portraits' order in the first and second bars respectively. It is known that these orders are different.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Your task is to calculate a single number - the minimum number of breaks that you need to perform on a first bar, to form a second bar by repositioning the broken parts.&lt;/p&gt;&#10;&lt;p&gt;Example:&lt;/p&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; N = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;;&#10;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; firstBar[]  = {&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;};&#10;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; secondBar[] = {&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;};&#10;chocolate(N, firstBar, secondBar);   &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; returns 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;n = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&#10;first_bar = [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]&#10;second_bar = [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]&#10;chocolate(n, first_bar, second_bar)   &lt;span class=&quot;hljs-comment&quot;&gt;# =&amp;gt; returns 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Chocolate Problem" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/shuffle-it-up-ii/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;We have an integer array with unique elements and we want to do the permutations that have an element fixed, in other words, these permutations should have a certain element at the same position than the original.&lt;/p&gt;&#10;&lt;p&gt;These permutations will be called: &lt;strong&gt;permutations with one fixed point&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;p&gt;Let's see an example with an array of four elements and we want the permutations that have a coincidence &lt;strong&gt;only at  index 0&lt;/strong&gt;, so these permutations are (the permutations between parenthesis):&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;arr = [1, 2, 3, 4]&#10;      (1, 3, 4, 2)&#10;      (1, 4, 2, 3)&#10;Two permutations matching with arr only at index 0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let's see the permutations of the same array with only one coincidence at index &lt;strong&gt;1&lt;/strong&gt;:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;arr = [1, 2, 3, 4]&#10;      (3, 2, 4, 1)&#10;      (4, 2, 1, 3)&#10;Two permutations matching with arr only at index 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once again, let's see the permutations of the same array with only one coincidence at index &lt;strong&gt;2&lt;/strong&gt;:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;arr = [1, 2, 3, 4]&#10;      (2, 4, 3, 1)&#10;      (4, 1, 3, 2)&#10;Two permutations matching with arr only at index 2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, let's see the permutations of the same array with only one coincidence at index &lt;strong&gt;3&lt;/strong&gt;:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;arr = [1, 2, 3, 4]&#10;      (2, 3, 1, 4)&#10;      (3, 1, 2, 4)&#10;Two permutations matching with arr only at index 3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For this array given above (arr) :&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;p&gt;We conclude that we have 8 permutations with one fixed point (two at each index of arr).&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;We may do the same development for our array, &lt;code&gt;arr&lt;/code&gt;, with two fixed points and we will get &lt;code&gt;6&lt;/code&gt; permutations.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;There are no permutations with coincidences only at three indexes.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;It's good to know that the amount of permutations with no coincidences at all are &lt;code&gt;9&lt;/code&gt;. See the kata &lt;a href=&quot;https://www.codewars.com/kata/shuffle-it-up&quot; target=&quot;_blank&quot;&gt;Shuffle It Up!!&lt;/a&gt;&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;In general:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;p&gt;When the amount of fixed points is equal to the array length, there is only one permutation, the original array.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;When the amount of fixed points surpasses the length of the array, obvously, there are no permutations at all.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Create a function that receives the length of the array and the number of fixed points and may output the total amount of permutations for these constraints.&lt;/p&gt;&#10;&lt;p&gt;Features of the random tests:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;length of the array = l&#10;number of fixed points = k&#10;10 ≤ k ≤ l ≤ 9000&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See the example tests!&#10;Enjoy it!!&lt;/p&gt;&#10;&lt;p&gt;Ruby versin will be released soon.&lt;/p&gt;&#10;&lt;p&gt;#Note: This kata was published previously but in a version not well optimized.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Shuffle It Up II" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/special-subsets-of-primes/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;A programmer that loves creating algorithms for security is doing a previous investigation of a special set of primes. Specially, he has to define ranges of values and to have the total number of the required primes.&lt;/p&gt;&#10;&lt;p&gt;These primes should fulfill the following requirements:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;p&gt;The primes should have at least 3 digits.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;The primes can not include the digit 0.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;The sum of the digits should be a multiple of a perfect square number. (&lt;strong&gt;Note:&lt;/strong&gt; even though 1 is a perfect square, &lt;strong&gt;do not&lt;/strong&gt; consider it for obvious reasons)&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;The product of the first digit by the last one cannot be 45, or in other words, if 5 is the first digit, the last one cannot be 9.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;The primes' digits should occur only once. Examples of this kind of primes are: &lt;code&gt;167, 359&lt;/code&gt;. Cases like &lt;code&gt;113&lt;/code&gt; and &lt;code&gt;331&lt;/code&gt; have to be discarded because digits 1 and 3 that appear twice respectively.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Once he has these special primes, that fulfill the constraints listed above, he has to classify them in three subsets: bouncy, increasing and decreasing primes.&#10;The increasing primes are the ones that have their digits in increasing order, for example : &lt;code&gt;157, 359, 569&lt;/code&gt;. &lt;/p&gt;&#10;&lt;p&gt;The decreasing ones, on the other hand, have their digits in decreasing order, for example: &lt;code&gt;761, 953, 971&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt;Finally, the bouncy primes are the ones that does not belong to any of both previous subsets: neither increasing nor decreasing ones, for example: &lt;code&gt;173, 193, 317&lt;/code&gt;.&lt;/p&gt;&#10;&lt;h2 id=&quot;your-task&quot;&gt;Your Task&lt;/h2&gt;&#10;&lt;p&gt;&lt;em&gt;Do you want to have the results of this investigation and accept the challenge? If your answer is affirmative, continue reading.&lt;/em&gt;&lt;/p&gt;&#10;&lt;p&gt;Your function will accept an integer higher than 100 (and lower than 50000) as an upper bound of the range to work in, so all these special primes should be lower or equal to the given value of &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt;The function should output a list of lists with the data in this order:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;[ [data for _bouncy_ primes], [data for _increasing_ primes], [data for _decreasing_ primes] ]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The data required for each subset should be as follows:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;[ min. prime found, max. prime found, number of primes in range ]&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;&#10;&lt;p&gt;Let's see some examples for some values of n:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;special_primes(101) --&amp;gt; [[0, 0, 0], [0, 0, 0], [0, 0, 0]]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;No special primes at this value (obviously).&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;special_primes(200) --&amp;gt; [[0, 0, 0], [0, 0, 0], [0, 0, 0]]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Still no special primes.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;special_primes(457) --&amp;gt; [[251, 439, 2], [349, 457, 4], [431, 431, 1]]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we have some values:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;bouncy primes: &lt;code&gt;251, 439&lt;/code&gt; (2 in total)&lt;/li&gt;&#10;&lt;li&gt;increasing primes: &lt;code&gt;349, 367, 389, 457&lt;/code&gt; (4)&lt;/li&gt;&#10;&lt;li&gt;decreasing primes: &lt;code&gt;431&lt;/code&gt; (1)&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;pre&gt;&lt;code&gt;special_primes(1000) --&amp;gt; [[251, 947, 11], [349, 479, 5], [431, 983, 4]]&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#10;&lt;li&gt;bouncy primes: &lt;code&gt;251, 439, 547, 587, 619, 659, 673, 691, 839, 857, 947&lt;/code&gt; (11)&lt;/li&gt;&#10;&lt;li&gt;increasing primes: &lt;code&gt;349, 367, 389, 457, 479&lt;/code&gt; (5)&lt;/li&gt;&#10;&lt;li&gt;decreasing primes: &lt;code&gt;431, 521, 853, 983&lt;/code&gt; (4)&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Good Luck and happy coding!&lt;/p&gt;&#10;&lt;hr&gt;&#10;&lt;p&gt;Items the programmer has to think after the investigation:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;p&gt;The highest possible prime, with these constraints, is &lt;strong&gt;____&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;The larger subset of prime is &lt;strong&gt;___&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;The smallest subset of primes is &lt;strong&gt;___&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;The sum of the digits of these special primes are always multiples of the perfect squares: &lt;strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;If your code passed you have these answers!!&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Special Subsets of Primes" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="4" />
                <option name="name" value="5 Kyu" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Write a function called that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return &lt;code&gt;true&lt;/code&gt; if the string is valid, and &lt;code&gt;false&lt;/code&gt; if it's invalid.&lt;/p&gt;&#10;&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;&#10;&lt;pre&gt;&lt;code&gt;&quot;()&quot;              =&amp;gt;  true&#10;&quot;)(()))&quot;          =&amp;gt;  false&#10;&quot;(&quot;               =&amp;gt;  false&#10;&quot;(())((()())())&quot;  =&amp;gt;  true&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;constraints&quot;&gt;Constraints&lt;/h2&gt;&#10;&lt;p&gt;&lt;code&gt;0 &amp;lt;= input.length &amp;lt;= 100&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;Along with opening (&lt;code&gt;(&lt;/code&gt;) and closing (&lt;code&gt;)&lt;/code&gt;) parenthesis, input may contain any valid ASCII characters.  Furthermore, the input string may be empty and/or not contain any parentheses at all.  Do &lt;strong&gt;not&lt;/strong&gt; treat other forms of brackets as parentheses (e.g. &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;).&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Valid Parenthesis" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/54d512e62a5e54c96200019e/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Given a positive number n &amp;gt; 1 find the prime factor decomposition of n.&#10;The result will be a string with the following form :&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt; &quot;(p1**n1)(p2**n2)...(pk**nk)&quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;with the p(i) in increasing order and n(i) empty if&#10;n(i) is 1.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;Example: n = 86240 should return &quot;(2**5)(5)(7**2)(11)&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Prime in Numbers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/directions-reduction/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;h1 id=&quot;once-upon-a-time-on-a-way-through-the-old-wild-west&quot;&gt;Once upon a time, on a way through the old wild west,…&lt;/h1&gt;&#10;&lt;p&gt;… a man was given directions to go from one point to another. The directions were &quot;NORTH&quot;, &quot;SOUTH&quot;, &quot;WEST&quot;, &quot;EAST&quot;. Clearly &quot;NORTH&quot; and &quot;SOUTH&quot; are opposite, &quot;WEST&quot; and &quot;EAST&quot; too. Going to one direction and coming back the opposite direction is a needless effort. Since this is the wild west, with dreadfull weather and not much water, it's important to save yourself some energy, otherwise you might die of thirst!&lt;/p&gt;&#10;&lt;h2 id=&quot;how-i-crossed-the-desert-the-smart-way&quot;&gt;How I crossed the desert the smart way.&lt;/h2&gt;&#10;&lt;p&gt;The directions given to the man are, for example, the following:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;[&quot;NORTH&quot;, &quot;SOUTH&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;, &quot;WEST&quot;, &quot;NORTH&quot;, &quot;WEST&quot;].&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;{ &quot;NORTH&quot;, &quot;SOUTH&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;, &quot;WEST&quot;, &quot;NORTH&quot;, &quot;WEST&quot; };&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or (haskell)&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;[North, South, South, East, West, North, West]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can immediatly see that going &quot;NORTH&quot; and then &quot;SOUTH&quot; is not reasonable, better stay to the same place!&#10;So the task is to give to the man a simplified version of the plan. A better plan in this case is simply:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;[&quot;WEST&quot;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;{ &quot;WEST&quot; }&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or (haskell)&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;[West]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or (rust)&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;[WEST];&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;other-examples&quot;&gt;Other examples:&lt;/h1&gt;&#10;&lt;p&gt;In &lt;code&gt;[&quot;NORTH&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;, &quot;WEST&quot;]&lt;/code&gt;, the direction &lt;code&gt;&quot;NORTH&quot; + &quot;SOUTH&quot;&lt;/code&gt; is going north and coming back &lt;em&gt;right away&lt;/em&gt;. What a waste of time! Better to do nothing. &lt;/p&gt;&#10;&lt;p&gt;The path becomes &lt;code&gt;[&quot;EAST&quot;, &quot;WEST&quot;]&lt;/code&gt;, now &lt;code&gt;&quot;EAST&quot;&lt;/code&gt; and &lt;code&gt;&quot;WEST&quot;&lt;/code&gt; annihilate each other, therefore, the final result is &lt;code&gt;[]&lt;/code&gt; (nil in Clojure).&lt;/p&gt;&#10;&lt;p&gt;In [&quot;NORTH&quot;, &quot;EAST&quot;, &quot;WEST&quot;, &quot;SOUTH&quot;, &quot;WEST&quot;, &quot;WEST&quot;], &quot;NORTH&quot; and &quot;SOUTH&quot; are not directly opposite but they become directly opposite after the reduction of &quot;EAST&quot; and &quot;WEST&quot; so the whole path is reducible to [&quot;WEST&quot;, &quot;WEST&quot;].&lt;/p&gt;&#10;&lt;h1 id=&quot;task&quot;&gt;Task&lt;/h1&gt;&#10;&lt;p&gt;Write a function &lt;code&gt;dirReduc&lt;/code&gt; which will take an array of strings and returns an array of strings with the needless directions removed (W&amp;lt;-&amp;gt;E or S&amp;lt;-&amp;gt;N side by side).&lt;/p&gt;&#10;&lt;p&gt;The Haskell version takes a list of directions with &lt;code&gt;data Direction = North | East | West | South&lt;/code&gt;.&#10;The Clojure version returns nil when the path is reduced to nothing.&#10;The Rust version takes a slice of &lt;code&gt;enum Direction {NORTH, SOUTH, EAST, WEST}&lt;/code&gt;.&lt;/p&gt;&#10;&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;dirReduc(@[&lt;span class=&quot;hljs-string&quot;&gt;@&quot;NORTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;EAST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;WEST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;NORTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;WEST&quot;&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; @[@&quot;WEST&quot;]&lt;/span&gt;&#10;dirReduc(@[&lt;span class=&quot;hljs-string&quot;&gt;@&quot;NORTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;EAST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;WEST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;@&quot;NORTH&quot;&lt;/span&gt;]); &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; @[]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;dirReduc([&lt;span class=&quot;hljs-string&quot;&gt;&quot;NORTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EAST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;WEST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;NORTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;WEST&quot;&lt;/span&gt;]) =&amp;gt; [&lt;span class=&quot;hljs-string&quot;&gt;&quot;WEST&quot;&lt;/span&gt;]&#10;dirReduc([&lt;span class=&quot;hljs-string&quot;&gt;&quot;NORTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EAST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;WEST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;NORTH&quot;&lt;/span&gt;]) =&amp;gt; []&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;dirReduc({&lt;span class=&quot;hljs-string&quot;&gt;&quot;NORTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EAST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;WEST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;NORTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;WEST&quot;&lt;/span&gt;}) =&amp;gt; {&lt;span class=&quot;hljs-string&quot;&gt;&quot;WEST&quot;&lt;/span&gt;}&#10;dirReduc({&lt;span class=&quot;hljs-string&quot;&gt;&quot;NORTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;SOUTH&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;EAST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;WEST&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;NORTH&quot;&lt;/span&gt;}) =&amp;gt; {}&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;dirReduce&lt;/span&gt; [&lt;span class=&quot;hljs-type&quot;&gt;North&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;South&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;South&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;East&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;West&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;North&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;West&lt;/span&gt;] `shouldBe` [&lt;span class=&quot;hljs-type&quot;&gt;West&lt;/span&gt;]&#10;&lt;span class=&quot;hljs-title&quot;&gt;dirReduce&lt;/span&gt; [&lt;span class=&quot;hljs-type&quot;&gt;North&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;South&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;South&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;East&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;West&lt;/span&gt;, &lt;span class=&quot;hljs-type&quot;&gt;North&lt;/span&gt;] `shouldBe` []&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;dirReduc([&quot;NORTH&quot;, &quot;SOUTH&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;, &quot;WEST&quot;, &quot;NORTH&quot;, &quot;WEST&quot;]) =&amp;gt; [&quot;WEST&quot;]&#10;dirReduc([&quot;NORTH&quot;, &quot;SOUTH&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;, &quot;WEST&quot;, &quot;NORTH&quot;]) =&amp;gt; nil&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;dir_reduc(&amp;amp;[NORTH, SOUTH, SOUTH, EAST, WEST, NORTH, WEST]) =&amp;gt; [WEST]&#10;dir_reduc(&amp;amp;[NORTH, SOUTH, SOUTH, EAST, WEST, NORTH]) =&amp;gt; []&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h1 id=&quot;see-more-examples-in-example-tests&quot;&gt;See more examples in &quot;Example Tests&quot;&lt;/h1&gt;&#10;&lt;h1 id=&quot;note&quot;&gt;Note&lt;/h1&gt;&#10;&lt;p&gt;Not all paths can be made simpler.&#10;The path [&quot;NORTH&quot;, &quot;WEST&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;] is not reducible. &quot;NORTH&quot; and &quot;WEST&quot;, &quot;WEST&quot; and &quot;SOUTH&quot;, &quot;SOUTH&quot; and &quot;EAST&quot; are not directly opposite of each other and can't become such. Hence the result path is itself : [&quot;NORTH&quot;, &quot;WEST&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;].&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Directions Reduction" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;The Fibonacci numbers are the numbers in the following integer sequence (Fn):&lt;/p&gt;&#10;&lt;blockquote&gt;&#10;&lt;p&gt;0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...&lt;/p&gt;&#10;&lt;/blockquote&gt;&#10;&lt;p&gt;such as &lt;/p&gt;&#10;&lt;blockquote&gt;&#10;&lt;p&gt;F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.&lt;/p&gt;&#10;&lt;/blockquote&gt;&#10;&lt;p&gt;Given a number, say prod (for product), we search two Fibonacci numbers F(n) and F(n+1) verifying &lt;/p&gt;&#10;&lt;blockquote&gt;&#10;&lt;p&gt;F(n) * F(n+1) = prod.&lt;/p&gt;&#10;&lt;/blockquote&gt;&#10;&lt;p&gt;Your function productFib takes an integer (prod) and returns&#10;an array: &lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;[F(n), F(n+1), true] or {F(n), F(n+1), 1} or (F(n), F(n+1), True)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;depending on the language if F(n) * F(n+1) = prod.&lt;/p&gt;&#10;&lt;p&gt;If you don't find two consecutive F(m) verifying &lt;code&gt;F(m) * F(m+1) = prod&lt;/code&gt;you will return&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;[F(m), F(m+1), false] or {F(n), F(n+1), 0} or (F(n), F(n+1), False)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;F(m) being the smallest one such as &lt;code&gt;F(m) * F(m+1) &amp;gt; prod&lt;/code&gt;.&lt;/p&gt;&#10;&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;productFib(&lt;span class=&quot;hljs-number&quot;&gt;714&lt;/span&gt;) # should &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;),&#10;                # since F(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, F(&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt; and &lt;span class=&quot;hljs-number&quot;&gt;714&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;&#10;&#10;productFib(&lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;) # should &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;),&#10;                # since F(&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt;, F(&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, F(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt; and &lt;span class=&quot;hljs-number&quot;&gt;21&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt; * &lt;span class=&quot;hljs-number&quot;&gt;55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;productFib(&lt;span class=&quot;hljs-number&quot;&gt;714&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# should return [21, 34, true], &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-comment&quot;&gt;# since F(8) = 21, F(9) = 34 and 714 = 21 * 34&lt;/span&gt;&#10;&#10;productFib(&lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# should return [34, 55, false], &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-comment&quot;&gt;# since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-crystal&quot;&gt;productFib(&lt;span class=&quot;hljs-number&quot;&gt;714&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# should return [21, 34, true], &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-comment&quot;&gt;# since F(8) = 21, F(9) = 34 and 714 = 21 * 34&lt;/span&gt;&#10;&#10;productFib(&lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# should return [34, 55, false], &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-comment&quot;&gt;# since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;productFib(&lt;span class=&quot;hljs-number&quot;&gt;714&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# should return [21, 34, true], &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-comment&quot;&gt;# since F(8) = 21, F(9) = 34 and 714 = 21 * 34&lt;/span&gt;&#10;&#10;productFib(&lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# should return [34, 55, false], &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-comment&quot;&gt;# since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;productFib(714) # should return [21, 34, true],&#10;                # since F(8) = 21, F(9) = 34 and 714 = 21 * 34&#10;&#10;productFib(800) # should return [34, 55, false],&#10;                # since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;productFib(714) # should return [21, 34, true],&#10;                # since F(8) = 21, F(9) = 34 and 714 = 21 * 34&#10;&#10;productFib(800) # should return [34, 55, false],&#10;                # since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;productFib(&lt;span class=&quot;hljs-number&quot;&gt;714&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# should return [21, 34, true], &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-comment&quot;&gt;# since F(8) = 21, F(9) = 34 and 714 = 21 * 34&lt;/span&gt;&#10;&#10;productFib(&lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# should return [34, 55, false], &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-comment&quot;&gt;# since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;productFib(&lt;span class=&quot;hljs-number&quot;&gt;714&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# should return [21, 34, true], &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-comment&quot;&gt;# since F(8) = 21, F(9) = 34 and 714 = 21 * 34&lt;/span&gt;&#10;&#10;productFib(&lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# should return [34, 55, false], &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-comment&quot;&gt;# since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;productFib(&lt;span class=&quot;hljs-number&quot;&gt;714&lt;/span&gt;) &lt;span class=&quot;hljs-meta&quot;&gt;# should return {21, 34, 1}, &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-meta&quot;&gt;# since F(8) = 21, F(9) = 34 and 714 = 21 * 34&lt;/span&gt;&#10;&#10;productFib(&lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;) &lt;span class=&quot;hljs-meta&quot;&gt;# should return {34, 55, 0}, &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-meta&quot;&gt;# since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;productFib(714) # should return {21, 34, 1},&#10;                # since F(8) = 21, F(9) = 34 and 714 = 21 * 34&#10;&#10;productFib(800) # should return {34, 55, 0},&#10;                # since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;productFib(&lt;span class=&quot;hljs-number&quot;&gt;714&lt;/span&gt;) &lt;span class=&quot;hljs-meta&quot;&gt;# should return {21, 34, true}, &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-meta&quot;&gt;# since F(8) = 21, F(9) = 34 and 714 = 21 * 34&lt;/span&gt;&#10;&#10;productFib(&lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;) &lt;span class=&quot;hljs-meta&quot;&gt;# should return {34, 55, false}, &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-meta&quot;&gt;# since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;productFib(&lt;span class=&quot;hljs-number&quot;&gt;714&lt;/span&gt;) &lt;span class=&quot;hljs-meta&quot;&gt;# should return {21, 34, true}, &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-meta&quot;&gt;# since F(8) = 21, F(9) = 34 and 714 = 21 * 34&lt;/span&gt;&#10;&#10;productFib(&lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt;) &lt;span class=&quot;hljs-meta&quot;&gt;# should return {34, 55, false}, &lt;/span&gt;&#10;                &lt;span class=&quot;hljs-meta&quot;&gt;# since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;productFib&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;714&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;-- should return (21, 34, True)&lt;/span&gt;&#10;               &lt;span class=&quot;hljs-comment&quot;&gt;-- since F(8) = 21, F(9) = 34 and 714 = 21 * 34&lt;/span&gt;&#10;&lt;span class=&quot;hljs-title&quot;&gt;productFib&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;800&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;-- should return (34, 55, False), &lt;/span&gt;&#10;               &lt;span class=&quot;hljs-comment&quot;&gt;-- since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &amp;lt; 800 &amp;lt; 34 * 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt; Not useful here but we can tell how to choose the number n up to which to go: we can use the &quot;golden ratio&quot; phi which is &lt;code&gt;(1 + sqrt(5))/2&lt;/code&gt; knowing that F(n) is asymptotic to: &lt;code&gt;phi^n / sqrt(5)&lt;/code&gt;. That gives a possible upper bound to n.&lt;/p&gt;&#10;&lt;p&gt;You can see examples in &quot;Example test&quot;.&lt;/p&gt;&#10;&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;&#10;&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Fibonacci_number&quot; target=&quot;_blank&quot;&gt;http://en.wikipedia.org/wiki/Fibonacci_number&lt;/a&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;a href=&quot;http://oeis.org/A000045&quot; target=&quot;_blank&quot;&gt;http://oeis.org/A000045&lt;/a&gt;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Product of Consecutive Fib Numbers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/calculating-with-functions/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;This time we want to write calculations using functions and get the results. Let's have a look at some examples:&lt;/p&gt;&#10;&lt;p&gt;JavaScript:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;seven(times(five())); &lt;span class=&quot;hljs-comment&quot;&gt;// must return 35&lt;/span&gt;&#10;four(plus(nine())); &lt;span class=&quot;hljs-comment&quot;&gt;// must return 13&lt;/span&gt;&#10;eight(minus(three())); &lt;span class=&quot;hljs-comment&quot;&gt;// must return 5&lt;/span&gt;&#10;six(dividedBy(two())); &lt;span class=&quot;hljs-comment&quot;&gt;// must return 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Ruby:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;seven(times(five)) &lt;span class=&quot;hljs-comment&quot;&gt;# must return 35&lt;/span&gt;&#10;four(plus(nine)) &lt;span class=&quot;hljs-comment&quot;&gt;# must return 13&lt;/span&gt;&#10;eight(minus(three)) &lt;span class=&quot;hljs-comment&quot;&gt;# must return 5&lt;/span&gt;&#10;six(divided_by(two)) &lt;span class=&quot;hljs-comment&quot;&gt;# must return 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Requirements:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;There must be a function for each number from 0 (&quot;zero&quot;) to 9 (&quot;nine&quot;)&lt;/li&gt;&#10;&lt;li&gt;There must be a function for each of the following mathematical operations: plus, minus, times, dividedBy (&lt;code&gt;divided_by&lt;/code&gt; in Ruby)&lt;/li&gt;&#10;&lt;li&gt;Each calculation consist of exactly one operation and two numbers&lt;/li&gt;&#10;&lt;li&gt;The most outer function represents the left operand, the most inner function represents the right operand&lt;/li&gt;&#10;&lt;li&gt;Divison should be &lt;strong&gt;integer division&lt;/strong&gt;, e.g &lt;code&gt;eight(dividedBy(three()))&lt;/code&gt;/&lt;code&gt;eight(divided_by(three))&lt;/code&gt; should return &lt;code&gt;2&lt;/code&gt;, not &lt;code&gt;2.666666...&lt;/code&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Calculating With Functions" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/sum-of-pairs/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;hr&gt;&#10;&lt;h2 id=&quot;sum-of-pairs&quot;&gt;Sum of Pairs&lt;/h2&gt;&#10;&lt;p&gt;Given a list of integers and a single sum value, return the first two values (parse from the left please) in order of appearance that add up to form the sum.&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;sum_pairs([&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;],         &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)&#10;&lt;span class=&quot;hljs-comment&quot;&gt;#              ^--^      3 + 7 = 10&lt;/span&gt;&#10;== [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]&#10;&#10;sum_pairs([&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;],         &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)&#10;&lt;span class=&quot;hljs-comment&quot;&gt;#          ^-----^         4 + 2 = 6, indices: 0, 2 *&lt;/span&gt;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;#             ^-----^      3 + 3 = 6, indices: 1, 3&lt;/span&gt;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;#                ^-----^   2 + 4 = 6, indices: 2, 4&lt;/span&gt;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;#  * entire pair is earlier, and therefore is the correct answer&lt;/span&gt;&#10;== [&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;]&#10;&#10;sum_pairs([&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&#10;&lt;span class=&quot;hljs-comment&quot;&gt;#  there are no pairs of values that can be added to produce 2.&lt;/span&gt;&#10;== &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt;/nil/undefined (Based on the language)&#10;&#10;sum_pairs([&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;],         &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)&#10;&lt;span class=&quot;hljs-comment&quot;&gt;#              ^-----------^   5 + 5 = 10, indices: 1, 5&lt;/span&gt;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;#                    ^--^      3 + 7 = 10, indices: 3, 4 *&lt;/span&gt;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;#  * entire pair is earlier, and therefore is the correct answer&lt;/span&gt;&#10;== [&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Negative numbers and duplicate numbers can and will appear.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; There will also be lists tested of lengths upwards of 10,000,000 elements. Be sure your code doesn't time out.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Sum of Pairs" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/weight-for-weight/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;My friend John and I are members of the &quot;Fat to Fit Club (FFC)&quot;. John is worried because&#10;each month a list with the weights of members is published and each month he is the last on the list&#10;which means he is the heaviest. &lt;/p&gt;&#10;&lt;p&gt;I am the one who establishes the list so I told him:&#10;&quot;Don't worry any more, I will modify the order of the list&quot;.&#10;It was decided to attribute a &quot;weight&quot; to numbers. The weight of a number will be from now on&#10;the sum of its digits. &lt;/p&gt;&#10;&lt;p&gt;For example &lt;code&gt;99&lt;/code&gt; will have &quot;weight&quot; &lt;code&gt;18&lt;/code&gt;, &lt;code&gt;100&lt;/code&gt; will have &quot;weight&quot;&#10;&lt;code&gt;1&lt;/code&gt; so in the list &lt;code&gt;100&lt;/code&gt; will come before &lt;code&gt;99&lt;/code&gt;.&#10;Given a string with the weights of FFC members in normal order can you give this string ordered&#10;by &quot;weights&quot; of these numbers?&lt;/p&gt;&#10;&lt;h1 id=&quot;example&quot;&gt;Example:&lt;/h1&gt;&#10;&lt;p&gt;&lt;code&gt;&quot;56 65 74 100 99 68 86 180 90&quot;&lt;/code&gt; ordered by numbers weights becomes:&#10;&lt;code&gt;&quot;100 180 90 56 65 74 68 86 99&quot;&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;When two numbers have the same &quot;weight&quot;, let us class them as if they were strings and not numbers:&#10;&lt;code&gt;100&lt;/code&gt; is before &lt;code&gt;180&lt;/code&gt; because its &quot;weight&quot; (1) is less than the one of &lt;code&gt;180&lt;/code&gt; (9)&#10;and &lt;code&gt;180&lt;/code&gt; is before &lt;code&gt;90&lt;/code&gt; since, having the same &quot;weight&quot; (9),  it comes before as a &lt;em&gt;string&lt;/em&gt;.&lt;/p&gt;&#10;&lt;p&gt;All numbers in the list are positive numbers and the list can be empty.&lt;/p&gt;&#10;&lt;h1 id=&quot;notes&quot;&gt;Notes&lt;/h1&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;it may happen that the input string have leading, trailing whitespaces and more than a unique whitespace between two consecutive numbers&lt;/li&gt;&#10;&lt;li&gt;Don't modify the input&lt;/li&gt;&#10;&lt;li&gt;For C: The result is freed.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Weight for Weight" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/maximum-subarray-sum/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:&lt;/p&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;maxSequence&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;]&#10;&lt;span class=&quot;hljs-comment&quot;&gt;-- should be 6: [4, -1, 2, 1]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;maxSequence([&lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])&#10;&lt;span class=&quot;hljs-comment&quot;&gt;// should be 6: [4, -1, 2, 1]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;maxSequence([&lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])&#10;&lt;span class=&quot;hljs-comment&quot;&gt;# should be 6: [4, -1, 2, 1]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;(&lt;span class=&quot;hljs-name&quot;&gt;max-sequence&lt;/span&gt; [&lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;])&#10;&lt;span class=&quot;hljs-comment&quot;&gt;;; should be 6: [4, -1, 2, 1]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;Max.sequence(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;[]{-&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;});&#10;&lt;span class=&quot;hljs-comment&quot;&gt;// should be 6: {4, -1, 2, 1}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;maxSequence({&lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;}, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;)&#10;&lt;span class=&quot;hljs-comment&quot;&gt;// should return 6, from sub-array: {4, -1, 2, 1}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;maxSequence({&lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;-5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;});&#10;&lt;span class=&quot;hljs-comment&quot;&gt;//should be 6: {4, -1, 2, 1}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.&lt;/p&gt;&#10;&lt;p&gt;Empty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Maximum Subarray Sum" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/simple-pig-latin/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Move the first letter of each word to the end of it, then add &quot;ay&quot; to the end of the word. Leave punctuation marks untouched.&lt;/p&gt;&#10;&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;pigIt(&lt;span class=&quot;hljs-string&quot;&gt;'Pig latin is cool'&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// igPay atinlay siay oolcay&lt;/span&gt;&#10;pigIt(&lt;span class=&quot;hljs-string&quot;&gt;'Hello world !'&lt;/span&gt;);     &lt;span class=&quot;hljs-comment&quot;&gt;// elloHay orldway !&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-objc&quot;&gt;pigIt(&lt;span class=&quot;hljs-string&quot;&gt;@&quot;Pig latin is cool&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; @&quot;igPay atinlay siay oolcay&quot;&lt;/span&gt;&#10;pigIt(&lt;span class=&quot;hljs-string&quot;&gt;@&quot;Hello world !&quot;&lt;/span&gt;);     &lt;span class=&quot;hljs-comment&quot;&gt;// =&amp;gt; @&quot;elloHay orldway !&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;pig_it(&lt;span class=&quot;hljs-string&quot;&gt;'Pig latin is cool'&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# igPay atinlay siay oolcay&lt;/span&gt;&#10;pig_it(&lt;span class=&quot;hljs-string&quot;&gt;'Hello world !'&lt;/span&gt;)     &lt;span class=&quot;hljs-comment&quot;&gt;# elloHay orldway !&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;pig_it(&lt;span class=&quot;hljs-string&quot;&gt;'Pig latin is cool'&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;# igPay atinlay siay oolcay&lt;/span&gt;&#10;pig_it(&lt;span class=&quot;hljs-string&quot;&gt;'Hello world !'&lt;/span&gt;)     &lt;span class=&quot;hljs-comment&quot;&gt;# elloHay orldway !&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;Kata.PigIt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pig latin is cool&quot;&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// igPay atinlay siay oolcay&lt;/span&gt;&#10;Kata.PigIt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello world !&quot;&lt;/span&gt;);     &lt;span class=&quot;hljs-comment&quot;&gt;// elloHay orldway !&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-C++&quot;&gt;pig_it(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Pig latin is cool&quot;&lt;/span&gt;);   &lt;span class=&quot;hljs-comment&quot;&gt;// igPay atinlay siay oolcay&lt;/span&gt;&#10;pig_it(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello world !&quot;&lt;/span&gt;);       &lt;span class=&quot;hljs-comment&quot;&gt;// elloHay orldway&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-Java&quot;&gt;PigLatin.pigIt(&lt;span class=&quot;hljs-string&quot;&gt;'Pig latin is cool'&lt;/span&gt;); &lt;span class=&quot;hljs-comment&quot;&gt;// igPay atinlay siay oolcay&lt;/span&gt;&#10;PigLatin.pigIt(&lt;span class=&quot;hljs-string&quot;&gt;'Hello world !'&lt;/span&gt;);     &lt;span class=&quot;hljs-comment&quot;&gt;// elloHay orldway !&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;(&lt;span class=&quot;hljs-name&quot;&gt;piglatin/pig-it&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Pig latin is cool&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;; &quot;igPay atinlay siay oolcay&quot;&lt;/span&gt;&#10;(&lt;span class=&quot;hljs-name&quot;&gt;piglatin/pig-it&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Hello world !&quot;&lt;/span&gt;)     &lt;span class=&quot;hljs-comment&quot;&gt;; &quot;elloHay orldway !&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="9" />
                      <option name="name" value="Simple Pig Latin" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="5" />
                <option name="name" value="4 Kyu" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/path-finder-number-1-can-you-reach-the-exit/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;h2 id=&quot;task&quot;&gt;Task&lt;/h2&gt;&#10;&lt;p&gt;You are at position [0, 0] in maze NxN and you can &lt;strong&gt;only&lt;/strong&gt; move in one of the four cardinal directions (i.e. North, East, South, West).  Return &lt;code&gt;true&lt;/code&gt; if you can reach position [N-1, N-1] or &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;&#10;&lt;p&gt;Empty positions are marked &lt;code&gt;.&lt;/code&gt;. Walls are marked &lt;code&gt;W&lt;/code&gt;. Start and exit positions are empty in all test cases.&lt;/p&gt;&#10;&lt;h2 id=&quot;path-finder-series&quot;&gt;Path Finder Series:&lt;/h2&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/5765870e190b1472ec0022a2&quot; target=&quot;_blank&quot;&gt;#1: can you reach the exit?&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/57658bfa28ed87ecfa00058a&quot; target=&quot;_blank&quot;&gt;#2: shortest path&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/576986639772456f6f00030c&quot; target=&quot;_blank&quot;&gt;#3: the Alpinist&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/5a0573c446d8435b8e00009f&quot; target=&quot;_blank&quot;&gt;#4: where are you?&lt;/a&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Path Finder #1 - Can You Reach the Exit" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/57658bfa28ed87ecfa00058a/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;h2 id=&quot;task&quot;&gt;Task&lt;/h2&gt;&#10;&lt;p&gt;You are at position &lt;code&gt;[0, 0]&lt;/code&gt; in maze NxN and you can &lt;strong&gt;only&lt;/strong&gt; move in one of the four cardinal directions (i.e. North, East, South, West). Return the minimal number of steps to exit position &lt;code&gt;[N-1, N-1]&lt;/code&gt; &lt;em&gt;if&lt;/em&gt; it is possible to reach the exit from the starting position.  Otherwise, return &lt;code&gt;false&lt;/code&gt; in &lt;strong&gt;JavaScript&lt;/strong&gt;/&lt;strong&gt;Python&lt;/strong&gt; and &lt;code&gt;-1&lt;/code&gt; in &lt;strong&gt;C++&lt;/strong&gt;/&lt;strong&gt;C#&lt;/strong&gt;/&lt;strong&gt;Java&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;p&gt;Empty positions are marked &lt;code&gt;.&lt;/code&gt;.  Walls are marked &lt;code&gt;W&lt;/code&gt;.  Start and exit positions are guaranteed to be empty in all test cases.&lt;/p&gt;&#10;&lt;h2 id=&quot;path-finder-series&quot;&gt;Path Finder Series:&lt;/h2&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/5765870e190b1472ec0022a2&quot; target=&quot;_blank&quot;&gt;#1: can you reach the exit?&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/57658bfa28ed87ecfa00058a&quot; target=&quot;_blank&quot;&gt;#2: shortest path&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/576986639772456f6f00030c&quot; target=&quot;_blank&quot;&gt;#3: the Alpinist&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/5a0573c446d8435b8e00009f&quot; target=&quot;_blank&quot;&gt;#4: where are you?&lt;/a&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Path Finder #2 - Shortest Path" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/path-finder-number-4-where-are-you/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Hey, Path Finder, where are you?&lt;/p&gt;&#10;&lt;h2 id=&quot;path-finder-series&quot;&gt;Path Finder Series:&lt;/h2&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/5765870e190b1472ec0022a2&quot; target=&quot;_blank&quot;&gt;#1: can you reach the exit?&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/57658bfa28ed87ecfa00058a&quot; target=&quot;_blank&quot;&gt;#2: shortest path&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/576986639772456f6f00030c&quot; target=&quot;_blank&quot;&gt;#3: the Alpinist&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/5a0573c446d8435b8e00009f&quot; target=&quot;_blank&quot;&gt;#4: where are you?&lt;/a&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Path Finder #4 - Where Are You" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/bribe-the-guards-of-the-crown-jewels/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;You are in the capital of Far, Far Away Land, and you have heard about this museum where the royal family's crown jewels are on display. Before you visit the museum, a friend tells you to bring some extra money that you'll need to bribe the guards. You see, he says, the crown jewels are in one of 10 rooms numbered from 1 to 10. The doors to these room are kept closed, and each is guarded by a very intimidating guard.&lt;/p&gt;&#10;&lt;p&gt;For security purposes, the jewels are moved every night to a different room. To find out which room they are in, you'll have to ask one of the guards. But first you have to pay him a bribe. After paying him:&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;If the jewels are behind the door he's guarding, he'll let you in.&lt;/li&gt;&#10;&lt;li&gt;Otherwise, he'll point you in the direction of the correct room by telling you if the room has a higher or lower room number than the room he's guarding.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt;The guards have a special rank system, and, depending on rank, the size of the bribe that you'll need to pay to each guard may vary. For example, you may have to pay $1 to the guard at room 1, $2 to the guard at room 2, and so on, up to $10 to the guard at room 10. The bribe amounts are specified by an array/list sorted by room number in ascending order. Hence, in this example, the bribes are given by &lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt;The problem you need to solve is to determine the minimum amount you may need &lt;em&gt;in the worst case&lt;/em&gt; to get into the room with the crown jewels. As a seasoned programmer, you might try doing a binary search. Let's assume that the bribes are as specified in the example above. You first go to the guard standing in front of room 5, and pay him $5. In the worst case the crown jewels are in room 10 and you'll end up paying: $5 + $8 + $9 + $10 = $32. It turns out that a regular binary search is not optimal in this case. You are better off if you first go to room 7. In the worst case the guard will direct you to the right(i.e., higher numbered rooms) and then you go to room 9. Again, in the worst case the guard will direct you to the right, and you go to room 10. In all, you'll have to pay $7 + $9 + $10 = $26. You can easily verify that if the first guard (at room 7) had directed you to the left, you would have ended up paying less than $26. So for this problem, the maximum you will need to pay is $26. There are no other solutions where you would need less in the worst case, so 26 is the solution to this problem instance. &lt;/p&gt;&#10;&lt;p&gt;You are asked to define function &lt;code&gt;least_bribes(bribes)&lt;/code&gt; that takes as argument an array that contains the bribes that each guard will accept in ascending room number and returns the minumum amount you'll need to spend on bribes &lt;em&gt;in the worst case&lt;/em&gt;. The problem is not limited to 10 rooms only, so the array &lt;code&gt;bribes&lt;/code&gt; can be of any length greater or equal to 1. Your code will have to handle arrays up to 100 in length and bribes between $1 and $1000.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Bribe the Guards of the Crown Jewels" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/total-increasing-or-decreasing-numbers-up-to-a-power-of-10/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Let's define &lt;code&gt;increasing&lt;/code&gt; numbers as the numbers whose digits, read from left to right, are never less than the previous ones: 234559 is an example of increasing number.&lt;/p&gt;&#10;&lt;p&gt;Conversely, &lt;code&gt;decreasing&lt;/code&gt; numbers have all the digits read from left to right so that no digits is bigger than the previous one: 97732 is an example of decreasing number.&lt;/p&gt;&#10;&lt;p&gt;You do not need to be the next Gauss to figure that all numbers with 1 or 2 digits are either increasing or decreasing: 00, 01, 02, ..., 98, 99 are all belonging to one of this categories (if not both, like 22 or 55): 101 is indeed the first number which does NOT fall into either of the categories. Same goes for all the numbers up to 109, while 110 is again a decreasing number.&lt;/p&gt;&#10;&lt;p&gt;Now your task is rather easy to declare (a bit less to perform): you have to build a function to return the total occurrences of all the increasing or decreasing numbers &lt;em&gt;below&lt;/em&gt; 10 raised to the xth power (x will always be &amp;gt;= 0).&lt;/p&gt;&#10;&lt;p&gt;To give you a starting point, there are a grand total of increasing and decreasing numbers as shown in the table:&lt;/p&gt;&#10;&lt;p&gt;|Total  | Below&#10;|---------------&#10;|1      | 1&#10;|10     | 10&#10;|100    | 100&#10;|475    | 1000&#10;|1675   | 10000&#10;|4954   | 100000&#10;|12952  | 1000000&lt;/p&gt;&#10;&lt;p&gt;This means that your function will have to behave like this:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;475&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;1675&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;4954&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;12952&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;475&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;1675&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;4954&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;12952&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;475&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;1675&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;4954&lt;/span&gt;&#10;total_inc_dec(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;12952&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;totalIncDec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; `shouldBe` &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&#10;&lt;span class=&quot;hljs-title&quot;&gt;totalIncDec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; `shouldBe` &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&#10;&lt;span class=&quot;hljs-title&quot;&gt;totalIncDec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; `shouldBe` &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&#10;&lt;span class=&quot;hljs-title&quot;&gt;totalIncDec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; `shouldBe` &lt;span class=&quot;hljs-number&quot;&gt;475&lt;/span&gt;&#10;&lt;span class=&quot;hljs-title&quot;&gt;totalIncDec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; `shouldBe` &lt;span class=&quot;hljs-number&quot;&gt;1675&lt;/span&gt;&#10;&lt;span class=&quot;hljs-title&quot;&gt;totalIncDec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; `shouldBe` &lt;span class=&quot;hljs-number&quot;&gt;4954&lt;/span&gt;&#10;&lt;span class=&quot;hljs-title&quot;&gt;totalIncDec&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; `shouldBe` &lt;span class=&quot;hljs-number&quot;&gt;12952&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-clojure&quot;&gt;total-inc-dec 0 =&amp;gt; 1&#10;total-inc-dec 1 =&amp;gt; 10&#10;total-inc-dec 2 =&amp;gt; 100&#10;total-inc-dec 3 =&amp;gt; 475&#10;total-inc-dec 4 =&amp;gt; 1675&#10;total-inc-dec 5 =&amp;gt; 4954&#10;total-inc-dec 6 =&amp;gt; 12952&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;TotalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&#10;TotalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&#10;TotalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&#10;TotalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;475&lt;/span&gt;&#10;TotalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;1675&lt;/span&gt;&#10;TotalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;4954&lt;/span&gt;&#10;TotalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;12952&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;475&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;1675&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;4954&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;12952&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;475&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;1675&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;4954&lt;/span&gt;&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;)==&lt;span class=&quot;hljs-number&quot;&gt;12952&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) should be (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) should be (&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) should be (&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) should be (&lt;span class=&quot;hljs-number&quot;&gt;475&lt;/span&gt;)&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) should be (&lt;span class=&quot;hljs-number&quot;&gt;1675&lt;/span&gt;)&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) should be (&lt;span class=&quot;hljs-number&quot;&gt;4954&lt;/span&gt;)&#10;totalIncDec(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) should be (&lt;span class=&quot;hljs-number&quot;&gt;12952&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt; efficiency and trying to figure out how it works are essential: with a brute force approach, some tests with larger numbers may take more than the total computing power currently on Earth to be finished in the short allotted time.&lt;/p&gt;&#10;&lt;p&gt;To make it even clearer, the increasing or decreasing numbers between in the range 101-200 are: [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 166, 167, 168, 169, 177, 178, 179, 188, 189, 199, 200], that is 47 of them. In the following range, 201-300, there are 41 of them and so on, getting rarer and rarer.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Trivia:&lt;/strong&gt; just for the sake of your own curiosity, a number which is neither decreasing of increasing is called a &lt;code&gt;bouncy&lt;/code&gt; number, like, say, 3848 or 37294; also, usually 0 is not considered being increasing, decreasing or bouncy, but it will be for the purpose of this kata&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Total Increasing or Decreasing Numbers up to a Power of 10" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/insane-increasing-or-decreasing-numbers/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;h1 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h1&gt;&#10;&lt;p&gt;This Kata is an insane step-up from &lt;a href=&quot;https://www.codewars.com/kata/total-increasing-or-decreasing-numbers-up-to-a-power-of-10/python&quot; target=&quot;_blank&quot;&gt;GiacomoSorbi's Kata&lt;/a&gt;,&#10;so I recommend to solve it first before trying this one.&lt;/p&gt;&#10;&lt;h1 id=&quot;problem-description&quot;&gt;Problem Description&lt;/h1&gt;&#10;&lt;p&gt;A positive integer &lt;code&gt;n&lt;/code&gt; is called an &lt;em&gt;increasing number&lt;/em&gt; if its digits are in increasing order&#10;(e.g. 123, 144568, 56799).&lt;/p&gt;&#10;&lt;p&gt;Similarly, &lt;code&gt;n&lt;/code&gt; is called a &lt;em&gt;decreasing number&lt;/em&gt; if its digits are in decreasing order&#10;(e.g. 210, 76642, 998500).&lt;/p&gt;&#10;&lt;p&gt;Note that the numbers whose digits are all the same (e.g. 1111, 22222) are both increasing and decreasing.&lt;/p&gt;&#10;&lt;p&gt;Given the maximum number of digits (&lt;code&gt;max_digits&lt;/code&gt;), how many positive integers in the range are either increasing or decreasing (or both)?&#10;Since your answer will be very large, please give your answer &lt;strong&gt;modulo 12345787&lt;/strong&gt;.&lt;/p&gt;&#10;&lt;p&gt;Also note that, unlike Giacomo's version, the number zero is excluded from the counts&#10;(because it's not positive).&lt;/p&gt;&#10;&lt;h1 id=&quot;constraints&quot;&gt;Constraints&lt;/h1&gt;&#10;&lt;p&gt;&lt;code&gt;1 &amp;lt;= max_digits &amp;lt;= 10 ** 9&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Note the input size!&lt;/strong&gt;&lt;/p&gt;&#10;&lt;p&gt;The input will be always a valid integer.&lt;/p&gt;&#10;&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# Up to two digits, all numbers are either increasing or decreasing&lt;/span&gt;&#10;insane_inc_or_dec(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;&#10;insane_inc_or_dec(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;99&lt;/span&gt;&#10;insane_inc_or_dec(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;474&lt;/span&gt;&#10;insane_inc_or_dec(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;1674&lt;/span&gt;&#10;insane_inc_or_dec(&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;4953&lt;/span&gt;&#10;insane_inc_or_dec(&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) == &lt;span class=&quot;hljs-number&quot;&gt;12951&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;h1 id=&quot;acknowledgement&quot;&gt;Acknowledgement&lt;/h1&gt;&#10;&lt;p&gt;This problem was inspired by &lt;a href=&quot;https://projecteuler.net/problem=113&quot; target=&quot;_blank&quot;&gt;Project Euler #113: Non-bouncy Numbers&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;If you enjoyed this Kata, please also have a look at &lt;a href=&quot;https://www.codewars.com/users/Bubbler/authored&quot; target=&quot;_blank&quot;&gt;my other Katas&lt;/a&gt;!&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Insane Increasing or Decreasing Numbers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/count-squares-in-the-chess-board/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;h1 id=&quot;task&quot;&gt;Task&lt;/h1&gt;&#10;&lt;p&gt;You are given a &lt;code&gt;chessBoard&lt;/code&gt;, a 2d integer array that contains only &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;. &lt;code&gt;0&lt;/code&gt; represents a chess piece and &lt;code&gt;1&lt;/code&gt; represents a empty grid. It's always square shape.&lt;/p&gt;&#10;&lt;p&gt;Your task is to count the number of squares made of empty grids.&lt;/p&gt;&#10;&lt;p&gt;The smallest size of the square is &lt;code&gt;2 x 2&lt;/code&gt;. The biggest size of the square is &lt;code&gt;n x n&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the size of chess board. &lt;/p&gt;&#10;&lt;p&gt;A square can overlap the part of other squares. For example:&lt;/p&gt;&#10;&lt;p&gt;If&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;chessBoard=[&#10;  [1,1,1],&#10;  [1,1,1],&#10;  [1,1,1]&#10;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;...there are four 2 x 2 squares in the chess board:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;[1,1, ]  [ ,1,1]  [ , , ]  [ , , ]&#10;[1,1, ]  [ ,1,1]  [1,1, ]  [ ,1,1]&#10;[ , , ]  [ , , ]  [1,1, ]  [ ,1,1]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And one 3 x 3 square:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;[1,1,1]&#10;[1,1,1]&#10;[1,1,1]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your output should be an object/dict. Each item in it should be: &lt;code&gt;size:number&lt;/code&gt;, where size is the square's size, and number is the number of squares. &lt;/p&gt;&#10;&lt;p&gt;For example, if there are four &lt;code&gt;2 x 2&lt;/code&gt; squares and one &lt;code&gt;3 x 3&lt;/code&gt; square in the chess board, the output should be: &lt;code&gt;{2:4,3:1}&lt;/code&gt;. The order of items is not important, &lt;code&gt;{3:1,2:4}&lt;/code&gt; is also a valid output.&lt;/p&gt;&#10;&lt;p&gt;If there is no square in the chess board, just return &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;&#10;&lt;h1 id=&quot;note&quot;&gt;Note&lt;/h1&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;code&gt;2 &amp;lt;= chessBoard.length &amp;lt;= 400&lt;/code&gt;&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;code&gt;5&lt;/code&gt; fixed testcases&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;code&gt;100&lt;/code&gt; random testcases, testing for correctness of solution&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;code&gt;100&lt;/code&gt; random testcases, testing for performance of code&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;All inputs are valid.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;Pay attention to code performance.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;If my reference solution gives the wrong result in the random tests, please let me know(post an issue). &lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;&#10;&lt;p&gt;For &lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;chessBoard = [&#10;  [1,1],&#10;  [1,1]&#10;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the output should be &lt;code&gt;{2:1}&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt;For &lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;chessBoard = [&#10;  [0,1],&#10;  [1,1]&#10;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the output should be &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt;For &lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;chessBoard = [&#10;  [1,1,1],&#10;  [1,1,1],&#10;  [1,1,1]&#10;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the output should be &lt;code&gt;{2:4,3:1}&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt;For &lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;chessBoard = [&#10;  [1,1,1],&#10;  [1,0,1],&#10;  [1,1,1]&#10;]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the output should be &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Count Squares in the Chess Board" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="6" />
                <option name="name" value="3 Kyu" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;h2 id=&quot;task&quot;&gt;Task&lt;/h2&gt;&#10;&lt;p&gt;You are at start location &lt;code&gt;[0, 0]&lt;/code&gt; in mountain area of NxN and you can &lt;strong&gt;only&lt;/strong&gt; move in one of the four cardinal directions (i.e. North, East, South, West). Return minimal number of &lt;code&gt;climb rounds&lt;/code&gt; to target location &lt;code&gt;[N-1, N-1]&lt;/code&gt;. Number of &lt;code&gt;climb rounds&lt;/code&gt; between adjacent locations is defined as difference of location altitudes (ascending or descending).&lt;/p&gt;&#10;&lt;p&gt;Location altitude is defined as an integer number (0-9).&lt;/p&gt;&#10;&lt;h2 id=&quot;path-finder-series&quot;&gt;Path Finder Series:&lt;/h2&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/5765870e190b1472ec0022a2&quot; target=&quot;_blank&quot;&gt;#1: can you reach the exit?&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/57658bfa28ed87ecfa00058a&quot; target=&quot;_blank&quot;&gt;#2: shortest path&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/576986639772456f6f00030c&quot; target=&quot;_blank&quot;&gt;#3: the Alpinist&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/5a0573c446d8435b8e00009f&quot; target=&quot;_blank&quot;&gt;#4: where are you?&lt;/a&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Path Finder #3 - The Alpinist" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/the-boolean-order/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;In this Kata, you will be given boolean values and boolean operators. Your task will be to return the number of arrangements that evaluate to &lt;code&gt;True&lt;/code&gt;. &lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;t,f&lt;/code&gt; will stand for &lt;code&gt;true, false&lt;/code&gt; and the operators will be &lt;code&gt;Boolean AND (&amp;amp;), OR (|), and XOR (^)&lt;/code&gt;. &lt;/p&gt;&#10;&lt;p&gt;For example, &lt;code&gt;solve(&quot;tft&quot;,&quot;^&amp;amp;&quot;) = 2&lt;/code&gt;, as follows: &lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;code&gt;&quot;((t ^ f) &amp;amp; t)&quot; = True&lt;/code&gt; &lt;/li&gt;&#10;&lt;li&gt;&lt;code&gt;&quot;(t ^ (f &amp;amp; t))&quot; = True&lt;/code&gt;     &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Notice that the order of the boolean values and operators does not change. What changes is the position of braces. &lt;/p&gt;&#10;&lt;p&gt;More examples in the test cases.&lt;/p&gt;&#10;&lt;p&gt;Good luck!&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="The Boolean Order" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/alphabetic-anagrams/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;Consider a &quot;word&quot; as any sequence of capital letters A-Z (not limited to just &quot;dictionary words&quot;). For any word with at least two different letters, there are other words composed of the same letters but in a different order (for instance, STATIONARILY/ANTIROYALIST, which happen to both be dictionary words; for our purposes &quot;AAIILNORSTTY&quot; is also a &quot;word&quot; composed of the same letters as these two).&lt;/p&gt;&#10;&lt;p&gt;We can then assign a number to every word, based on where it falls in an alphabetically sorted list of all words made up of the same group of letters. One way to do this would be to generate the entire list of words and find the desired one, but this would be slow if the word is long.&lt;/p&gt;&#10;&lt;p&gt;Given a word, return its number. Your function should be able to accept any word 25 letters or less in length (possibly with some letters repeated), and take no more than 500 milliseconds to run. To compare, when the solution code runs the 27 test cases in JS, it takes 101ms.&lt;/p&gt;&#10;&lt;p&gt;For very large words, you'll run into number precision issues in JS (if the word's position is greater than 2^53). For the JS tests with large positions, there's some leeway (.000000001%). If you feel like you're getting it right for the smaller ranks, and only failing by rounding on the larger, submit a couple more times and see if it takes.&lt;/p&gt;&#10;&lt;p&gt;Python, Java and Haskell have arbitrary integer precision, so you must be precise in those languages (unless someone corrects me).&lt;/p&gt;&#10;&lt;p&gt;C# is using a &lt;code&gt;long&lt;/code&gt;, which may not have the best precision, but the tests are locked so we can't change it.&lt;/p&gt;&#10;&lt;p&gt;Sample words, with their rank:&lt;br&gt;&#10;ABAB = 2&lt;br&gt;&#10;AAAB = 1&lt;br&gt;&#10;BAAA = 4&lt;br&gt;&#10;QUESTION = 24572&lt;br&gt;&#10;BOOKKEEPER = 10743&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Alphabetic Anagrams" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="7" />
                <option name="name" value="2 Kyu" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-weight:bold;font-size:1.5em;color:red&quot;&gt;&lt;em&gt;Blaine is a pain, and that is the truth&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&amp;nbsp;- Jack Chambers&lt;/em&gt;&lt;/p&gt;&#10;&lt;h1 id=&quot;span-stylecolororangebackgroundspan&quot;&gt;&lt;span style=&quot;color:orange&quot;&gt;Background&lt;/span&gt;&lt;/h1&gt;&#10;&lt;p&gt;Blaine likes to deliberately crash toy trains!&lt;/p&gt;&#10;&lt;h2 id=&quot;span-stylecolororangetrainsspan&quot;&gt;&lt;span style=&quot;color:orange&quot;&gt;&lt;em&gt;Trains&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&#10;&lt;p&gt;Trains look like this&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;code&gt;Aaaaaaaaaa&lt;/code&gt;&lt;/li&gt;&#10;&lt;li&gt;&lt;code&gt;bbbB&lt;/code&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;The engine and carriages use the same character, but because the only engine is uppercase you can tell which way the train is going.&lt;/p&gt;&#10;&lt;p&gt;Trains can be any alphabetic character&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;An &quot;Express&quot; train uses &lt;code&gt;X&lt;/code&gt;&lt;/li&gt;&#10;&lt;li&gt;Normal suburban trains are all other letters&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;h2 id=&quot;span-stylecolororangetracksspan&quot;&gt;&lt;span style=&quot;color:orange&quot;&gt;&lt;em&gt;Tracks&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&#10;&lt;p&gt;Track pieces are characters &lt;code&gt;-&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;\&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;X&lt;/code&gt; and they can be joined together like this&lt;/p&gt;&#10;&lt;table&gt;&#10;&lt;tbody&gt;&lt;tr&gt;&#10;&lt;td&gt;*Straights*&#10;&lt;/td&gt;&lt;td width=&quot;20%&quot;&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;&#10;&lt;hr&gt;&#10;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&#10;&lt;/td&gt;&lt;td width=&quot;20%&quot;&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;|&#10;|&#10;|&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;td width=&quot;20%&quot;&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;\&#10; \&#10;  \&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;td width=&quot;20%&quot;&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;   /&#10;  /&#10; /&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;/tr&gt;&#10;&lt;tr&gt;&#10;&lt;td&gt;*Corners*&#10;&lt;/td&gt;&lt;td&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;|&#10;|&#10;\\-----&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;td&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;     |&#10;     |&#10;-----/&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;td&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;/-----&#10;|&#10;|&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;td&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;-----\&#10;     |&#10;     |&#10;&lt;/pre&gt;&#10;&#10;&lt;/td&gt;&lt;/tr&gt;&#10;&#10;&lt;tr&gt;&#10;&lt;td&gt;*Curves*&#10;&lt;/td&gt;&lt;td&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;&#10;&lt;p&gt;-----&lt;br&gt;      \-----&lt;/p&gt;&#10;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&#10;&lt;/td&gt;&lt;td&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;&#10;&lt;pre&gt;&lt;code&gt;  /-----&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;-----/&lt;/p&gt;&#10;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&#10;&lt;/td&gt;&lt;td&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;  |&#10;  /&#10; /&#10; |&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;td&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;|&#10;\&#10; \&#10; |&#10;&lt;/pre&gt;&#10;&#10;&lt;/td&gt;&lt;/tr&gt;&#10;&lt;tr&gt;&#10;&lt;td&gt;*Crossings*&#10;&lt;/td&gt;&lt;td&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;   |&#10;---+---&#10;   |&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;td&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;  \ /&#10;   X&#10;  / \&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;td&gt;&#10;&lt;/td&gt;&lt;td&gt;&#10;&#10;&lt;/td&gt;&lt;/tr&gt;&#10;&#10;&#10;&lt;/tbody&gt;&lt;/table&gt;&#10;&#10;&lt;h2 id=&quot;span-stylecolororangedescribing-where-a-train-is-on-the-linespan&quot;&gt;&lt;span style=&quot;color:orange&quot;&gt;&lt;em&gt;Describing where a train is on the line&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&#10;&lt;p&gt;The track &quot;zero position&quot; is defined as the leftmost piece of track of the top row.&lt;/p&gt;&#10;&lt;p&gt;Other &lt;u&gt;track positions&lt;/u&gt; are just distances from this &lt;em&gt;zero position&lt;/em&gt; (following the line beginning clockwise).&lt;/p&gt;&#10;&lt;p&gt;A &lt;u&gt;train position&lt;/u&gt; is the track position of the train &lt;em&gt;engine&lt;/em&gt;. &lt;/p&gt;&#10;&lt;h2 id=&quot;span-stylecolororangestationsspan&quot;&gt;&lt;span style=&quot;color:orange&quot;&gt;&lt;em&gt;Stations&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&#10;&lt;p&gt;Train stations are represented by a letter &lt;code&gt;S&lt;/code&gt;. &lt;/p&gt;&#10;&lt;p&gt;Stations can be on straight sections of track, or crossings, like this&lt;/p&gt;&#10;&lt;table&gt;&#10;&lt;tbody&gt;&lt;tr&gt;&#10;&lt;td rowspan=&quot;2&quot;&gt;*Stations*&#10;&lt;/td&gt;&lt;td width=&quot;20%&quot;&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;&#10;&lt;p&gt;----S-----&lt;/p&gt;&#10;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&#10;&lt;/td&gt;&lt;td width=&quot;20%&quot;&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;|&#10;S&#10;|&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;td width=&quot;20%&quot;&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;\&#10; S&#10;  \&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;td width=&quot;20%&quot;&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;   /&#10;  S&#10; /&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;/tr&gt;&#10;&#10;&lt;tr&gt;&#10;&lt;td width=&quot;20%&quot;&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;    |&#10;----S----&#10;    |&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;td width=&quot;20%&quot;&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt; \ /&#10;  S&#10; /  \&#10;&lt;/pre&gt;&#10;&lt;/td&gt;&lt;/tr&gt;&#10;&#10;&lt;/tbody&gt;&lt;/table&gt;&#10;&#10;&lt;br&gt;&#10;When a train arrives at a station it stops there for a period of time determined by the length of the train!&#10;&#10;&lt;p&gt;The time &lt;strong&gt;T&lt;/strong&gt; that a train will remain at the station is same as the number of &lt;em&gt;carriages&lt;/em&gt; it has. &lt;/p&gt;&#10;&lt;p&gt;For example&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;code&gt;bbbB&lt;/code&gt; - will stop at a station for 3 time units&lt;/li&gt;&#10;&lt;li&gt;&lt;code&gt;Aa&lt;/code&gt; - will stop at a station for 1 time unit&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Exception to the rule: The &quot;Express&quot; trains never stop at any station.&lt;/p&gt;&#10;&lt;h2 id=&quot;span-stylecolororangecollisionsspan&quot;&gt;&lt;span style=&quot;color:orange&quot;&gt;&lt;em&gt;Collisions&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&#10;&lt;p&gt;There are lots of ways to crash trains. Here are a few of Blaine's favorites...&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;The Chicken-Run&lt;/em&gt; - Train chicken. Maximum impact.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;The T-Bone&lt;/em&gt; -  Two trains and one crossing&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;The Self-Destruct&lt;/em&gt; - Nobody else to blame here&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;The Cabooser&lt;/em&gt; - Run up the tail of a stopped train&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;The Kamikaze&lt;/em&gt; - Crash head-on into a stopped train&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;h1 id=&quot;span-stylecolororangekata-taskspan&quot;&gt;&lt;span style=&quot;color:orange&quot;&gt;Kata Task&lt;/span&gt;&lt;/h1&gt;&#10;&lt;p&gt;Blaine has a variety of &lt;em&gt;continuous loop&lt;/em&gt; train lines. &lt;/p&gt;&#10;&lt;p&gt;Two trains are then placed onto the line, and both start moving at the same time. &lt;/p&gt;&#10;&lt;p&gt;How long (how many iterations) before the trains collide?&lt;/p&gt;&#10;&lt;h2 id=&quot;span-stylecolororangeinputspan&quot;&gt;&lt;span style=&quot;color:orange&quot;&gt;&lt;em&gt;Input&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;code&gt;track&lt;/code&gt; - string representation of the entire train line (&lt;code&gt;\n&lt;/code&gt; separators - maybe jagged, maybe not trailing)&lt;/li&gt;&#10;&lt;li&gt;&lt;code&gt;a&lt;/code&gt; - train A&lt;/li&gt;&#10;&lt;li&gt;&lt;code&gt;aPos&lt;/code&gt; - train A start position&lt;/li&gt;&#10;&lt;li&gt;&lt;code&gt;b&lt;/code&gt; - train B&lt;/li&gt;&#10;&lt;li&gt;&lt;code&gt;bPos&lt;/code&gt; - train B start position&lt;/li&gt;&#10;&lt;li&gt;&lt;code&gt;limit&lt;/code&gt; - how long before Blaine tires of waiting for a crash and gives up&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;h2 id=&quot;span-stylecolororangeoutputspan&quot;&gt;&lt;span style=&quot;color:orange&quot;&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;Return how long before the trains collide, or&lt;/li&gt;&#10;&lt;li&gt;Return &lt;code&gt;-1&lt;/code&gt; if they have not crashed before &lt;code&gt;limit&lt;/code&gt; time has elapsed, or&lt;/li&gt;&#10;&lt;li&gt;Return &lt;code&gt;0&lt;/code&gt; if the trains were already crashed in their start positions. Blaine is sneaky sometimes.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;h1 id=&quot;span-stylecolororangenotesspan&quot;&gt;&lt;span style=&quot;color:orange&quot;&gt;Notes&lt;/span&gt;&lt;/h1&gt;&#10;&lt;p&gt;Trains&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;Speed...&lt;ul&gt;&#10;&lt;li&gt;All trains (even the &quot;Express&quot; ones) move at the same constant speed of 1 track piece / time unit&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;Length...&lt;ul&gt;&#10;&lt;li&gt;Trains can be any length, but there will always be at least one carriage&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;Stations...&lt;ul&gt;&#10;&lt;li&gt;Suburban trains stop at every station&lt;/li&gt;&#10;&lt;li&gt;&quot;Express&quot; trains don't stop at any station&lt;/li&gt;&#10;&lt;li&gt;If the start position happens to be at a station then the train leaves at the next move&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;Directions...&lt;ul&gt;&#10;&lt;li&gt;Trains can travel in either direction&lt;/li&gt;&#10;&lt;li&gt;A train that looks like &lt;code&gt;zzzzzZ&lt;/code&gt; is travelling &lt;em&gt;clockwise&lt;/em&gt; as it passed the track &quot;zero position&quot;&lt;/li&gt;&#10;&lt;li&gt;A train that looks like &lt;code&gt;Zzzzzz&lt;/code&gt; is traveliing &lt;em&gt;anti-clockwise&lt;/em&gt; as it passes the track &quot;zero position&quot;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Tracks&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;All tracks are single continuous loops&lt;/li&gt;&#10;&lt;li&gt;There are no ambiguous corners / junctions in Blaine's track layouts&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;All input is valid&lt;/p&gt;&#10;&lt;h1 id=&quot;span-stylecolororangeexamplespan&quot;&gt;&lt;span style=&quot;color:orange&quot;&gt;Example&lt;/span&gt;&lt;/h1&gt;&#10;&lt;p&gt;In the following track layout:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;The &quot;zero position&quot; is  &lt;span style=&quot;background:orange&quot;&gt;/&lt;/span&gt;&lt;/li&gt;&#10;&lt;li&gt;Train A is &lt;span style=&quot;background:green&quot;&gt;Aaaa&lt;/span&gt; and is at position &lt;code&gt;147&lt;/code&gt;&lt;/li&gt;&#10;&lt;li&gt;Train B is &lt;span style=&quot;background:red&quot;&gt;Bbbbbbbbbbb&lt;/span&gt; and is at position &lt;code&gt;288&lt;/code&gt;&lt;/li&gt;&#10;&lt;li&gt;There are 3 stations denoted by &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;pre style=&quot;background:black&quot;&gt;                                &lt;span style=&quot;background:orange&quot;&gt;/&lt;/span&gt;------------\&#10;/-----&lt;span style=&quot;background:green&quot;&gt;Aaaa&lt;/span&gt;----\                /             |&#10;|             |               /              S&#10;|             |              /               |&#10;|        /----+--------------+------\        |&#10;\       /     |              |      |        |&#10; \      |     \              |      |        |&#10; |      |      \-------------+------+--------+---\&#10; |      |                    |      |        |   |&#10; \------+------S-------------+------/        /   |&#10;        |                    |              /    |&#10;        \--------------------+-------------/     |&#10;                             |                   |&#10;/-------------\              |                   |&#10;|             |              |             /-----+----\&#10;|             |              |             |     |     \&#10;\-------------+--------------+-----S-------+-----/      \&#10;              |              |             |             \&#10;              |              |             |             |&#10;              |              \-------------+-------------/&#10;              |                            |&#10;              \---------&lt;span style=&quot;background:red&quot;&gt;Bbbbbbbbbbb&lt;/span&gt;--------/&#10;&lt;/pre&gt;&#10;&#10;&lt;br&gt;&#10;&lt;hr&gt;&#10;Good Luck!&#10;&#10;&lt;p&gt;DM&lt;br&gt;&lt;span style=&quot;color:red&quot;&gt;:-)&lt;/span&gt;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Blane is a Pain" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/the-position-of-a-digital-string-in-a-infinite-digital-string/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;blockquote&gt;&#10;&lt;p&gt;When no more interesting kata can be resolved, I just choose to create the new kata, to solve their own, to enjoy the process  --myjinxin2015 said&lt;/p&gt;&#10;&lt;/blockquote&gt;&#10;&lt;h1 id=&quot;description&quot;&gt;Description:&lt;/h1&gt;&#10;&lt;p&gt; There is a infinite string. You can imagine it's a combination of numbers from 1 to n, like this:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt; &quot;123456789101112131415....n-2n-1n&quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Please note: the length of the string is infinite. It depends on how long you need it(I can't offer it as a argument, it only exists in your imagination) ;-)&lt;/p&gt;&#10;&lt;p&gt; Your task is complete function &lt;code&gt;findPosition&lt;/code&gt; that accept a digital string &lt;code&gt;num&lt;/code&gt;. Returns the position(index) of the digital string(the first appearance).&lt;/p&gt;&#10;&lt;p&gt; For example:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt; findPosition(&quot;456&quot;) == 3&#10; because &quot;123456789101112131415&quot;.indexOf(&quot;456&quot;) = 3&#10;             ^^^&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Is it simple? No, It is more difficult than you think ;-) &lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt; findPosition(&quot;454&quot;) = ?&#10; Oh, no! There is no &quot;454&quot; in &quot;123456789101112131415&quot;,&#10; so we should return -1?&#10; No, I said, this is a string of infinite length.&#10; We need to increase the length of the string to find &quot;454&quot;&#10;&#10; findPosition(&quot;454&quot;) == 79&#10; because &quot;123456789101112131415...44454647&quot;.indexOf(&quot;454&quot;)=79&#10;                                    ^^^&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; The length of argument &lt;code&gt;num&lt;/code&gt; is 2 to 15. So now there are two ways: one is to create a huge own string to find the index position; Or thinking about an algorithm to calculate the index position. &lt;/p&gt;&#10;&lt;p&gt; Which way would you choose? ;-)&lt;/p&gt;&#10;&lt;h1 id=&quot;some-examples&quot;&gt;Some examples:&lt;/h1&gt;&#10;&lt;pre&gt;&lt;code&gt; findPosition(&quot;456&quot;) == 3&#10; (&quot;...3456...&quot;)&#10;       ^^^&#10; findPosition(&quot;454&quot;) == 79&#10; (&quot;...444546...&quot;)&#10;        ^^^&#10; findPosition(&quot;455&quot;) == 98&#10; (&quot;...545556...&quot;)&#10;       ^^^&#10; findPosition(&quot;910&quot;) == 8&#10; (&quot;...7891011...&quot;)&#10;        ^^^&#10; findPosition(&quot;9100&quot;) == 188&#10; (&quot;...9899100101...&quot;)&#10;         ^^^^&#10; findPosition(&quot;99100&quot;) == 187&#10; (&quot;...9899100101...&quot;)&#10;        ^^^^^&#10; findPosition(&quot;00101&quot;) == 190&#10; (&quot;...99100101...&quot;)&#10;         ^^^^^&#10; findPosition(&quot;001&quot;) == 190&#10; (&quot;...9899100101...&quot;)&#10;           ^^^&#10; findPosition(&quot;123456789&quot;) == 0&#10; findPosition(&quot;1234567891&quot;) == 0&#10; findPosition(&quot;123456798&quot;) == 1000000071&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A bit difficulty, A bit of fun, happy coding ;-)&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="The Position of a Digital String in a Infinite Digital String" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="8" />
                <option name="name" value="1 Kyu" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;From &lt;a href=&quot;https://www.codewars.com/kata/four-pass-transport/train/python&quot;&gt;CodeWars&lt;/a&gt;&#10;&lt;div class=&quot;markdown&quot; id=&quot;description&quot;&gt;&lt;!--Four Pass Transport--&gt;&#10;&lt;p&gt;The eccentric candy-maker, Billy Bonka, is building a new candy factory to produce his new 4-flavor sugar pops. The candy is made by placing a piece of candy base onto a conveyer belt which transports the candy through four separate processing stations in sequential order. Each station adds another layer of flavor.&lt;/p&gt;&#10;&lt;p&gt;Due to an error in the factory blueprints, the four stations have been constructed in incorrect locations. It's too costly to disassemble the stations, so you've been called in.&lt;/p&gt;&#10;&lt;p&gt;Arrange the directional path of the conveyer belt so that it passes through each of the stations in sequential order while also traveling the shortest distance possible.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;color:#f88&quot;&gt;Input&lt;/h2&gt;&#10;&lt;p&gt;An array consisting of the locations of each station on the factory floor, in order. The factory floor is a &lt;code&gt;10&lt;/code&gt; x &lt;code&gt;10&lt;/code&gt; matrix (with &lt;code&gt;0&lt;/code&gt; starting index).&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;color:#f88&quot;&gt;Output&lt;/h2&gt;&#10;&lt;p&gt;Your function should return the path of the conveyer belt as an array.&lt;br&gt;&#10;If a valid configuration is not possible, return &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;The position values in the input and output arrays will consist of integers in the range &lt;code&gt;0 - 99&lt;/code&gt;, inclusive. These integers represent a position on the factory floor.&lt;br&gt;&#10;For example, the position &lt;code&gt;[0,8]&lt;/code&gt; is given as &lt;code&gt;8&lt;/code&gt;, and &lt;code&gt;[4,6]&lt;/code&gt; is given as &lt;code&gt;46&lt;/code&gt;&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;color:#f88&quot;&gt;Technical Details&lt;/h2&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;The conveyer belt must run through each station once and in ascending order&lt;/li&gt;&#10;    &lt;li&gt;The conveyer belt  must not intersect/overlap itself&lt;/li&gt;&#10;    &lt;li&gt;The distance covered by the conveyer belt must be the minimum necessary to complete the task&lt;/li&gt;&#10;    &lt;li&gt;Full Test Suite: &lt;code&gt;30&lt;/code&gt; fixed tests, &lt;code&gt;100&lt;/code&gt; random tests&lt;/li&gt;&#10;    &lt;li&gt;Inputs will always be valid and each test will have zero or more possible solutions..&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;h2 style=&quot;color:#f88&quot;&gt;Test Example&lt;/h2&gt;&#10;&lt;img src=&quot;https://i.imgur.com/eAofgDs.png&quot; alt=&quot;4 stations&quot;&gt;&#10;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//INPUT - reference image A&lt;/span&gt;&#10;&lt;span class=&quot;hljs-keyword&quot;&gt;let&lt;/span&gt; stations = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;];&#10;fourPass(stations);&#10;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;//OUTPUT #1 - reference image B&lt;/span&gt;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;// [0, 1, 2, 3, 4, 5, 15, 25, 35, 45, 55, 65, 64, 63, 73, 83, 93, 94, 95, 96, 86, 76, 66, 56, 46, 36]&lt;/span&gt;&#10;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;//OUTPUT #2 - reference image C&lt;/span&gt;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;// [0, 10, 20, 30, 40, 50, 60, 61, 62, 63, 64, 65, 75, 85, 84, 83, 93, 94, 95, 96, 86, 76, 66, 56, 46, 36]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# INPUT - reference image A&lt;/span&gt;&#10;stations = [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;]&#10;four_pass(stations)&#10;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;# OUTPUT #1 - reference image B&lt;/span&gt;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;# [0, 1, 2, 3, 4, 5, 15, 25, 35, 45, 55, 65, 64, 63, 73, 83, 93, 94, 95, 96, 86, 76, 66, 56, 46, 36]&lt;/span&gt;&#10;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;# OUTPUT #2 - reference image C&lt;/span&gt;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;# [0, 10, 20, 30, 40, 50, 60, 61, 62, 63, 64, 65, 75, 85, 84, 83, 93, 94, 95, 96, 86, 76, 66, 56, 46, 36]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre style=&quot;display: none;&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// INPUT - reference image A&lt;/span&gt;&#10;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;[] stations = {&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;93&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;};&#10;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; FPT(stations).solve();&#10;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;// OUTPUT #1 - reference image B&lt;/span&gt;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;// [0, 1, 2, 3, 4, 5, 15, 25, 35, 45, 55, 65, 64, 63, 73, 83, 93, 94, 95, 96, 86, 76, 66, 56, 46, 36]&lt;/span&gt;&#10;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;// OUTPUT #2 - reference image C&lt;/span&gt;&#10;&lt;span class=&quot;hljs-comment&quot;&gt;// [0, 10, 20, 30, 40, 50, 60, 61, 62, 63, 64, 65, 75, 85, 84, 83, 93, 94, 95, 96, 86, 76, 66, 56, 46, 36]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;If you enjoyed this kata, be sure to check out &lt;a href=&quot;https://www.codewars.com/users/docgunthrop/authored&quot; target=&quot;_blank&quot;&gt;my other katas&lt;/a&gt;.&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Four Pass Transport" />
                      <option name="status" value="Failed" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
            </list>
          </option>
        </RemoteCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>